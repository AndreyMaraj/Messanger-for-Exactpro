{"ast":null,"code":"var _jsxFileName = \"/home/maria/Messenger-for-Exactpro/client-master/src/components/ChatInformation.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport Requests from '../Requests';\nimport Profile from './Profile';\nimport AddMemberToChat from './AddMemberToChat';\nimport ChangeChatInfo from './ChangeChatInfo';\nimport UserAvatar from './UserAvatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Avatar, Button, Checkbox, Container, CssBaseline, Grid, IconButton, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Toolbar, Typography } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar profile = ''; // информация о чате\n\nconst Chat = observer(_c = _s(({\n  chatInfo,\n  groupUsersStore,\n  profileStore,\n  onlineStatusStore,\n  Done\n}) => {\n  _s();\n\n  const [item, setItem] = useState('Information'); // отображаемый элемент\n\n  const [lastItem, setLastItem] = useState(''); // предыдущий отображаемый элемент\n\n  const useStyles = makeStyles(theme => // стили\n  createStyles({\n    content: {\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden'\n    },\n    header: {\n      position: \"static\",\n      flexGrow: 1,\n      height: '10%'\n    },\n    headerTitle: {\n      flexGrow: 1\n    },\n    headerButton: {\n      marginLeft: theme.spacing(2),\n      color: 'white',\n      background: '#3d50b6'\n    },\n    addMember: {\n      width: '100%',\n      position: 'relative',\n      overflow: 'scroll',\n      height: '90%'\n    },\n    root: {\n      flexGrow: 1\n    },\n    root1: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      position: 'relative',\n      overflow: 'auto'\n    },\n    paper: {\n      marginTop: theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    title: {\n      flexGrow: 1\n    },\n    userNameLabel: {},\n    backButton: {\n      marginRight: theme.spacing(2),\n      color: 'white',\n      background: '#3d50b6'\n    },\n    editButton: {\n      marginRight: theme.spacing(2),\n      color: 'white',\n      background: '#3d50b6'\n    },\n    cancelButton: {\n      marginRight: theme.spacing(2),\n      color: 'white',\n      background: '#3d50b6'\n    },\n    addMemberButton: {\n      variant: \"contained\",\n      color: \"primary\"\n    },\n    smallAvatar: {\n      width: theme.spacing(5),\n      height: theme.spacing(5)\n    },\n    largeAvatar: {\n      width: theme.spacing(15),\n      height: theme.spacing(15)\n    },\n    groupNameInput: {},\n    groupBioInput: {},\n    nameInput: {},\n    formControl: {\n      margin: theme.spacing(3)\n    },\n    members: {\n      overflow: 'auto',\n      width: 100\n    },\n    demo: {\n      backgroundColor: theme.palette.background.paper\n    }\n  }));\n  const classes = useStyles(); // классы стилей\n  // удалить пользователя из чата\n\n  function RemoveMember(user) {\n    let data = {\n      // формирование данных  для отправки на сервер\n      chatId: chatInfo.id,\n      user: user.name\n    };\n    var request = Requests.RemoveMemberFromChat(data); // отправка запроса об удалении пользователя из чата\n\n    switch (request === null || request === void 0 ? void 0 : request.status) {\n      case 200:\n        break;\n\n      case 401:\n        alert(\"User is not logged in.\");\n        break;\n\n      case 403:\n        alert(\"User has insufficient rights.\");\n        break;\n\n      default:\n        alert(\"Error.\");\n        break;\n    }\n  } // открытие профиля \n\n\n  function OpenProfile() {\n    profileStore.Clear(); // удаление информации о предыдущем профил\n\n    var request = Requests.OpenProfile(profile); // запрос на открытие профиля\n\n    switch (request === null || request === void 0 ? void 0 : request.status) {\n      case 200:\n        break;\n\n      case 401:\n        alert(\"User is not logged in.\");\n        break;\n\n      default:\n        alert(\"Error.\");\n        break;\n    }\n  } // Добавление администратора\n\n\n  function AddAdmin(name) {\n    let data = {\n      // формирование данных  для отправки на сервер\n      chatId: chatInfo.id,\n      user: name\n    };\n    var request = Requests.AddChatAdministrator(data); // отправка запроса на добавление администратора\n\n    switch (request === null || request === void 0 ? void 0 : request.status) {\n      case 200:\n        groupUsersStore.usersData.map((user, index) => {\n          if (user.name === name) {\n            groupUsersStore.usersData[index].role = 'admin';\n          }\n        });\n        break;\n\n      case 401:\n        alert(\"User is not logged in.\");\n        break;\n\n      case 403:\n        alert(\"User has insufficient rights.\");\n        break;\n\n      default:\n        alert(\"Error.\");\n        break;\n    }\n  } //Удаление администратора\n\n\n  function DeleteAdmin(name) {\n    let data = {\n      // формирование данных  для отправки на сервер\n      chatId: chatInfo.id,\n      user: name\n    };\n    var request = Requests.RemoveChatAdministrator(data); // запрос на удаление администратора \n\n    switch (request === null || request === void 0 ? void 0 : request.status) {\n      case 200:\n        break;\n\n      case 401:\n        alert(\"User is not logged in.\");\n        break;\n\n      case 403:\n        alert(\"User has insufficient rights.\");\n        break;\n\n      default:\n        alert(\"Error.\");\n        break;\n    }\n  } // Пользователей которых нет в чате\n\n\n  function UsersToAddToChat() {\n    var request = Requests.UsersToAddToChat(chatInfo.id); // отправка запроса о пользователях, которых нет в чате\n\n    switch (request === null || request === void 0 ? void 0 : request.status) {\n      case 200:\n        return JSON.parse(request.responseText);\n\n      case 401:\n        alert(\"User is not logged in.\");\n        return null;\n\n      default:\n        alert(\"Error.\");\n        return null;\n    }\n  }\n\n  function SetItem() {\n    switch (item) {\n      case 'Information':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.content,\n          children: [/*#__PURE__*/_jsxDEV(AppBar, {\n            className: classes.header,\n            children: /*#__PURE__*/_jsxDEV(Toolbar, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => Done(),\n                edge: \"start\",\n                className: classes.headerButton,\n                children: /*#__PURE__*/_jsxDEV(ArrowBackIosIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.headerTitle,\n                variant: \"h6\",\n                noWrap: true,\n                children: \"Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 33\n              }, this), chatInfo.type === '3' || chatInfo.type === '2' && (chatInfo.role === 'admin' || chatInfo.role === 'owner') ? /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => setItem('ChangeChatInfo'),\n                className: classes.headerButton,\n                variant: \"outlined\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 37\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Container, {\n            children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.paper,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 5,\n                  className: classes.paper,\n                  children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                    src: chatInfo.picture,\n                    className: classes.largeAvatar\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    className: classes.groupNameInput,\n                    children: chatInfo.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 279,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    className: classes.groupBioInput,\n                    children: chatInfo.bio\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 5,\n                  className: classes.paper,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h6\",\n                    className: classes.title,\n                    children: \"Members\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.demo,\n                    children: /*#__PURE__*/_jsxDEV(List, {\n                      dense: true,\n                      className: classes.root1,\n                      children: [chatInfo.role !== 'none' ? /*#__PURE__*/_jsxDEV(ListItem, {\n                        children: /*#__PURE__*/_jsxDEV(Button, {\n                          onClick: () => setItem('AddMember'),\n                          className: classes.addMemberButton,\n                          fullWidth: true,\n                          children: \"Add Member\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 310,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 309,\n                        columnNumber: 53\n                      }, this) : null, groupUsersStore.usersData.map((user, index) => {\n                        if (chatInfo.id === user.id) {\n                          return /*#__PURE__*/_jsxDEV(ListItem, {\n                            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                              children: /*#__PURE__*/_jsxDEV(UserAvatar, {\n                                user: {\n                                  name: user.name,\n                                  picture: user.picture\n                                },\n                                onlineStatusStore: onlineStatusStore,\n                                size: 5\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 327,\n                                columnNumber: 69\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 326,\n                              columnNumber: 65\n                            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                              primary: user.name,\n                              secondary: chatInfo.role !== 'owner' && user.role !== 'none' ? user.role : null,\n                              onClick: () => {\n                                profile = user.name;\n                                setLastItem('Information');\n                                setItem('Profile');\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 333,\n                              columnNumber: 65\n                            }, this), chatInfo.type === '3' || chatInfo.type === '2' && (chatInfo.role === 'owner' || chatInfo.role === 'admin' && user.role === 'none') ? /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                                edge: \"end\",\n                                \"aria-label\": \"delete\",\n                                onClick: () => RemoveMember(user),\n                                children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 345,\n                                  columnNumber: 77\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 340,\n                                columnNumber: 73\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 339,\n                              columnNumber: 69\n                            }, this) : null]\n                          }, index, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 323,\n                            columnNumber: 61\n                          }, this);\n                        }\n                      })]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 304,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 301,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 37\n                }, this), chatInfo.type === '2' && chatInfo.role === 'owner' ? /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 2,\n                  className: classes.paper,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h6\",\n                    className: classes.title,\n                    children: \"Admins\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 363,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.demo,\n                    children: /*#__PURE__*/_jsxDEV(List, {\n                      dense: true,\n                      children: groupUsersStore.usersData.map((user, index) => {\n                        return /*#__PURE__*/_jsxDEV(ListItem, {\n                          children: chatInfo.type === '2' && chatInfo.role === 'owner' ? user.role !== 'owner' ? /*#__PURE__*/_jsxDEV(Checkbox, {\n                            color: \"primary\",\n                            checked: user.role === 'admin',\n                            onChange: () => {\n                              user.role !== 'admin' ? AddAdmin(user.name) : DeleteAdmin(user.name);\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 382,\n                            columnNumber: 73\n                          }, this) : /*#__PURE__*/_jsxDEV(Checkbox, {\n                            checked: true,\n                            disabled: true\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 388,\n                            columnNumber: 73\n                          }, this) : null\n                        }, index, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 377,\n                          columnNumber: 61\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 372,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 369,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 41\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this);\n\n      case 'ChangeChatInfo':\n        return /*#__PURE__*/_jsxDEV(ChangeChatInfo, {\n          chatInfo: chatInfo,\n          Done: () => setItem('Information')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 21\n        }, this);\n\n      case 'AddMember':\n        var users = UsersToAddToChat();\n\n        if (!users) {\n          users = [];\n        }\n\n        return /*#__PURE__*/_jsxDEV(AddMemberToChat, {\n          chatInfo: chatInfo,\n          users: users,\n          profileStore: profileStore,\n          onlineStatusStore: onlineStatusStore,\n          Done: () => setItem('Information')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 21\n        }, this);\n\n      case 'Profile':\n        OpenProfile();\n        return /*#__PURE__*/_jsxDEV(Profile, {\n          profileStore: profileStore,\n          onlineStatusStore: onlineStatusStore,\n          Change: false,\n          Done: () => {\n            lastItem === 'Information' ? setItem('Information') : setItem('AddMember');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 21\n        }, this);\n    }\n  }\n\n  return SetItem();\n}, \"Uiy9JdrycIGSEJJdl78eOBidAAU=\", false, function () {\n  return [useStyles];\n}));\n_c2 = Chat;\nexport default Chat;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Chat$observer\");\n$RefreshReg$(_c2, \"Chat\");","map":{"version":3,"sources":["/home/maria/Messenger-for-Exactpro/client-master/src/components/ChatInformation.tsx"],"names":["React","useState","observer","Requests","Profile","AddMemberToChat","ChangeChatInfo","UserAvatar","createStyles","makeStyles","AppBar","Avatar","Button","Checkbox","Container","CssBaseline","Grid","IconButton","List","ListItem","ListItemAvatar","ListItemSecondaryAction","ListItemText","Toolbar","Typography","ArrowBackIosIcon","DeleteIcon","profile","Chat","chatInfo","groupUsersStore","profileStore","onlineStatusStore","Done","item","setItem","lastItem","setLastItem","useStyles","theme","content","width","height","overflow","header","position","flexGrow","headerTitle","headerButton","marginLeft","spacing","color","background","addMember","root","root1","backgroundColor","palette","paper","marginTop","display","flexDirection","alignItems","title","userNameLabel","backButton","marginRight","editButton","cancelButton","addMemberButton","variant","smallAvatar","largeAvatar","groupNameInput","groupBioInput","nameInput","formControl","margin","members","demo","classes","RemoveMember","user","data","chatId","id","name","request","RemoveMemberFromChat","status","alert","OpenProfile","Clear","AddAdmin","AddChatAdministrator","usersData","map","index","role","DeleteAdmin","RemoveChatAdministrator","UsersToAddToChat","JSON","parse","responseText","SetItem","type","picture","bio","users"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {observer} from 'mobx-react-lite'\nimport Requests from '../Requests'\nimport Profile from './Profile'\nimport AddMemberToChat from './AddMemberToChat'\nimport ChangeChatInfo from './ChangeChatInfo'\nimport UserAvatar from './UserAvatar'\nimport OnlineStatusStore from '../stores/OnlineStatusStore'\nimport GroupUsersStore from '../stores/GroupUsersStore'\nimport ProfileStore from '../stores/ProfileStore'\nimport { ChatsUpdate } from \"../interfaces/ChatsUpdate\"\nimport { ChatUser } from '../interfaces/ChatUser'\nimport { UserInfo } from '../interfaces/UserInfo'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { AppBar, Avatar, Button, Checkbox, Container, CssBaseline, Grid, IconButton, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Toolbar, Typography } from '@material-ui/core'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nvar profile: string = ''\n\n// информация о чате\nconst Chat = observer(({chatInfo, groupUsersStore, profileStore, onlineStatusStore, Done}:{chatInfo: ChatsUpdate, groupUsersStore: GroupUsersStore, profileStore: ProfileStore, onlineStatusStore: OnlineStatusStore, Done: ()=> void}) => {\n    \n    const [item, setItem] = useState<string>('Information') // отображаемый элемент\n    const [lastItem, setLastItem] = useState<string>('') // предыдущий отображаемый элемент\n    const useStyles = makeStyles((theme: Theme) => // стили\n        createStyles({\n            content: {\n                width: '100%',\n                height: '100%',\n                overflow: 'hidden'\n            },\n            header: {\n                position: \"static\",\n                flexGrow: 1,\n                height: '10%'\n            },\n            headerTitle: {\n                flexGrow: 1\n            },\n            headerButton: {\n                marginLeft: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            addMember: {\n                width: '100%',\n                position: 'relative',\n                overflow: 'scroll',\n                height: '90%'\n            },\n            root: {\n                flexGrow: 1\n            },\n            root1: {\n                width: '100%',\n                backgroundColor: theme.palette.background.paper,\n                position: 'relative',\n                overflow: 'auto'\n            },\n            paper: {\n                marginTop: theme.spacing(8),\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            },\n            title: {\n                flexGrow: 1\n            },\n            userNameLabel: {\n\n            },\n            backButton: {\n                marginRight: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            editButton: {\n                marginRight: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            cancelButton: {\n                marginRight: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            addMemberButton: {\n                variant: \"contained\",\n                color: \"primary\"\n            },\n            smallAvatar: {\n                width: theme.spacing(5),\n                height: theme.spacing(5)\n            },\n            largeAvatar: {\n                width: theme.spacing(15),\n                height: theme.spacing(15)\n            },\n            groupNameInput: {\n\n            },\n            groupBioInput: {\n      \n            },\n            nameInput: {\n\n            },\n            formControl: {\n                margin: theme.spacing(3)\n            },\n            members: {\n                overflow: 'auto',\n                width: 100\n            },\n            demo: {\n                backgroundColor: theme.palette.background.paper\n            }\n        })\n    )\n    const classes = useStyles() // классы стилей\n\n    // удалить пользователя из чата\n    function RemoveMember(user: ChatUser): void { \n        let data: {chatId: string, user: string} = { // формирование данных  для отправки на сервер\n            chatId: chatInfo.id,\n            user: user.name\n        }\n        var request: {responseText: string, status: number} | null = Requests.RemoveMemberFromChat(data) // отправка запроса об удалении пользователя из чата\n        switch(request?.status){\n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            case 403:\n                alert(\"User has insufficient rights.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }\n    }\n\n    // открытие профиля \n    function OpenProfile(): void {\n        profileStore.Clear() // удаление информации о предыдущем профил\n        var request: {responseText: string, status: number} | null = Requests.OpenProfile(profile) // запрос на открытие профиля\n        switch(request?.status){\n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }  \n    }\n\n    // Добавление администратора\n    function AddAdmin(name: string) {\n        let data: {chatId: string, user: string} = { // формирование данных  для отправки на сервер\n            chatId: chatInfo.id,\n            user: name\n        }\n        var request: {responseText: string, status: number} | null = Requests.AddChatAdministrator(data) // отправка запроса на добавление администратора\n        switch(request?.status){\n            case 200:\n                groupUsersStore.usersData.map((user: ChatUser, index: number)=>{\n                    if(user.name === name){\n                        groupUsersStore.usersData[index].role = 'admin'\n                    }\n                })\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            case 403:\n                alert(\"User has insufficient rights.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }\n    }\n\n    //Удаление администратора\n    function DeleteAdmin(name: string) {\n        let data: {chatId: string, user: string} = { // формирование данных  для отправки на сервер\n            chatId: chatInfo.id,\n            user: name\n        }\n        var request: {responseText: string, status: number} | null = Requests.RemoveChatAdministrator(data) // запрос на удаление администратора \n        switch(request?.status){\n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            case 403:\n                alert(\"User has insufficient rights.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }\n    }\n\n    // Пользователей которых нет в чате\n    function UsersToAddToChat(): UserInfo[] | null {\n        var request: {responseText: string, status: number} | null = Requests.UsersToAddToChat(chatInfo.id) // отправка запроса о пользователях, которых нет в чате\n        switch(request?.status){\n            case 200:\n                return JSON.parse(request.responseText) as UserInfo[]\n            case 401:\n                alert(\"User is not logged in.\")\n                return null\n            default:\n                alert(\"Error.\")\n                return null\n        }\n    }\n    \n    function SetItem(): JSX.Element {\n        switch(item){\n            case 'Information':\n                return(\n                    <div\n                        className={classes.content}\n                    >\n                        <AppBar \n                            className={classes.header}\n                        >\n                            <Toolbar>\n                                <IconButton\n                                    onClick={()=>Done()}\n                                    edge=\"start\"\n                                    className={classes.headerButton}\n                                >\n                                    <ArrowBackIosIcon />\n                                </IconButton>\n                                <Typography \n                                    className={classes.headerTitle} \n                                    variant=\"h6\" \n                                    noWrap\n                                >\n                                    Information\n                                </Typography>\n                                {chatInfo.type === '3' || chatInfo.type === '2' && (chatInfo.role === 'admin' || chatInfo.role === 'owner') ?\n                                    <Button\n                                        onClick={()=>setItem('ChangeChatInfo')}\n                                        className={classes.headerButton}\n                                        variant=\"outlined\"\n                                    >\n                                        Edit\n                                    </Button>\n                                : null\n                                }\n                            </Toolbar>\n                        </AppBar>\n                        <Container>\n                            <CssBaseline />\n                            <div\n                                className={classes.paper}\n                            >\n                                <Grid\n                                    container\n                                >\n                                    <Grid\n                                        item\n                                        xs={5}\n                                        className={classes.paper}\n                                    >\n                                        <Avatar \n                                            src={chatInfo.picture} \n                                            className={classes.largeAvatar}\n                                        />\n                                        <Typography\n                                            className={classes.groupNameInput}\n                                        >\n                                            {chatInfo.title}\n                                        </Typography>\n                                        <Typography\n                                            className={classes.groupBioInput}\n                                        >\n                                            {chatInfo.bio}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid\n                                        item\n                                        xs={5}\n                                        className={classes.paper}\n                                    >\n                                        <Typography\n                                            variant=\"h6\" \n                                            className={classes.title}\n                                        >\n                                            Members\n                                        </Typography>\n                                        <div \n                                            className={classes.demo}\n                                        >\n                                            <List \n                                                dense={true}\n                                                className={classes.root1}\n                                            >\n                                                {chatInfo.role !== 'none' ?\n                                                    <ListItem>\n                                                        <Button \n                                                            onClick={()=>setItem('AddMember')}\n                                                            className={classes.addMemberButton}\n                                                            fullWidth\n                                                        >\n                                                            Add Member\n                                                        </Button>\n                                                    </ListItem>\n                                                : null\n                                                }\n                                                {groupUsersStore.usersData.map((user: ChatUser, index: number) => {\n                                                    if (chatInfo.id === user.id){\n                                                        return(\n                                                            <ListItem \n                                                                key={index}\n                                                            >\n                                                                <ListItemAvatar>\n                                                                    <UserAvatar \n                                                                        user={{name: user.name, picture: user.picture}} \n                                                                        onlineStatusStore={onlineStatusStore}\n                                                                        size={5}\n                                                                    />\n                                                                </ListItemAvatar>\n                                                                <ListItemText\n                                                                    primary={user.name}\n                                                                    secondary={chatInfo.role !== 'owner' && user.role!== 'none' ? user.role : null}\n                                                                    onClick={()=>{profile = user.name; setLastItem('Information'); setItem('Profile');}}\n                                                                />\n                                                                {chatInfo.type === '3' ||  (chatInfo.type === '2' && (chatInfo.role === 'owner' || (chatInfo.role === 'admin' && user.role === 'none'))) ?\n                                                                    <ListItemSecondaryAction>\n                                                                        <IconButton \n                                                                            edge=\"end\" \n                                                                            aria-label=\"delete\"\n                                                                            onClick={()=>RemoveMember(user)}\n                                                                        >\n                                                                            <DeleteIcon />\n                                                                        </IconButton>\n                                                                    </ListItemSecondaryAction>\n                                                                : null\n                                                                }\n                                                            </ListItem>\n                                                        )\n                                                    }\n                                                })}\n                                            </List>\n                                        </div>\n                                    </Grid>\n                                    {chatInfo.type === '2' && chatInfo.role === 'owner' ?\n                                        <Grid\n                                            item\n                                            xs={2}\n                                            className={classes.paper}\n                                        >\n                                            <Typography\n                                                variant=\"h6\" \n                                                className={classes.title}\n                                            >\n                                                Admins\n                                            </Typography>\n                                            <div \n                                                className={classes.demo}\n                                            >\n                                                <List \n                                                    dense={true}\n                                                >\n                                                    {groupUsersStore.usersData.map((user: ChatUser, index: number) => {\n                                                        return(\n                                                            <ListItem \n                                                                key={index}\n                                                            >\n                                                                {chatInfo.type === '2' && chatInfo.role === 'owner' ?\n                                                                    user.role !== 'owner' ?\n                                                                        <Checkbox\n                                                                            color=\"primary\"\n                                                                            checked={user.role==='admin'} \n                                                                            onChange={()=>{user.role !== 'admin' ? AddAdmin(user.name) : DeleteAdmin(user.name)}}\n                                                                        />\n                                                                    :\n                                                                        <Checkbox\n                                                                            checked\n                                                                            disabled\n                                                                        />\n                                                                : null\n                                                                }\n                                                            </ListItem>\n                                                        )\n                                                    })}\n                                                </List>\n                                            </div>\n                                        </Grid>\n                                    : null\n                                    }\n                                </Grid>\n                            </div>\n                        </Container>\n                    </div>\n                )\n            case 'ChangeChatInfo':\n                return(\n                    <ChangeChatInfo \n                        chatInfo={chatInfo} \n                        Done={()=>setItem('Information')}\n                    />\n                )\n            case 'AddMember':\n                var users: UserInfo[] | null = UsersToAddToChat()\n                if(!users){\n                    users = []\n                }\n                return(\n                    <AddMemberToChat\n                        chatInfo={chatInfo} \n                        users={users}\n                        profileStore={profileStore}\n                        onlineStatusStore={onlineStatusStore}\n                        Done={()=>setItem('Information')}\n                    />\n                )\n            case 'Profile':\n                OpenProfile()\n                return(\n                    <Profile \n                        profileStore={profileStore} \n                        onlineStatusStore={onlineStatusStore} \n                        Change={false} \n                        Done={()=>{lastItem === 'Information' ? setItem('Information') : setItem('AddMember')}}\n                    />\n                )\n            default:\n                return(\n                    <React.Fragment/>\n                )\n        }\n    }\n\n    return (\n        SetItem()\n    )\n})\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}