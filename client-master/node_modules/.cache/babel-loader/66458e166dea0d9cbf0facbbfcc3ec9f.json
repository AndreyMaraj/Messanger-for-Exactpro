{"ast":null,"code":"var _jsxFileName = \"/home/maria/Messenger-for-Exactpro/client-master/src/components/UpdateListener.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Requests from '../Requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Обработка подписок Sse\nconst UpdateListener = ({\n  chatsStore,\n  messagesStore,\n  groupUsersStore,\n  profileStore,\n  onlineStatusStore\n}) => {\n  _s();\n\n  useEffect(() => {\n    // Оповещение сервера о том, что пользователь \"онлайн\"\n    const online = setInterval(() => {\n      var request = Requests.Alive();\n\n      switch (request === null || request === void 0 ? void 0 : request.status) {\n        case 0:\n          break;\n\n        case 200:\n          break;\n\n        case 401:\n          alert(\"User is not logged in.\");\n          break;\n\n        default:\n          alert(\"Error.\");\n          break;\n      }\n    }, 15000);\n    const sse = Requests.SseSubscribe(); // Подписка на ссе\n\n    console.log(\"subscribe to sse channel\");\n    sse.addEventListener(\"update\", upd => {\n      // обработка новых и измененных чатов\n      console.log(upd);\n      console.log(typeof upd != 'string');\n\n      if (typeof upd != 'string' && typeof upd.data !== 'string') {\n        const data = JSON.parse(upd.data);\n        console.log(data);\n        var newChat = true;\n\n        for (var i = 0; i < chatsStore.chatsData.length; i++) {\n          if (data.id === chatsStore.chatsData[i].id) {\n            // если чат уже есть - изменяем его данные \n            chatsStore.chatsData[i].title = data.title;\n            chatsStore.chatsData[i].bio = data.bio;\n            chatsStore.chatsData[i].type = data.type;\n            chatsStore.chatsData[i].picture = data.picture;\n            chatsStore.chatsData[i].role = data.role;\n            newChat = false;\n            break;\n          }\n        }\n\n        if (newChat) {\n          // если чата нет - добавляем\n          chatsStore.addEntry(data);\n        }\n      }\n    });\n    sse.addEventListener(\"chat-is-deleted\", data => {\n      // обработка удаленных чатов\n      var chatId = JSON.parse(data.data).id;\n      console.log(data);\n\n      for (var i = 0; i < chatsStore.chatsData.length; i++) {\n        if (chatId === chatsStore.chatsData[i].id) {\n          // если чат есть - удаляем\n          chatsStore.chatsData.splice(i, 1);\n          break;\n        }\n      }\n    });\n    sse.addEventListener(\"message-is-deleted\", data => {\n      // обработка удаленных сообщений\n      var messageId = JSON.parse(data.data).id;\n      console.log(messageId);\n\n      for (var i = 0; i < messagesStore.messagesData.length; i++) {\n        if (messageId === messagesStore.messagesData[i].id) {\n          // если сообщение есть - удаляем\n          messagesStore.messagesData.splice(i, 1);\n          break;\n        }\n      }\n    });\n    sse.addEventListener(\"user-is-deleted\", data => {\n      // обработка удаленного пользователя из чата\n      var chatId = JSON.parse(data.data).id;\n      var userName = JSON.parse(data.data).name;\n      console.log(userName);\n      console.log(groupUsersStore.usersData.length);\n\n      if (chatId === groupUsersStore.chatId) {\n        // если открыт данный чат\n        for (var i = 0; i < groupUsersStore.usersData.length; i++) {\n          console.log(groupUsersStore.usersData[i].name);\n\n          if (userName === groupUsersStore.usersData[i].name) {\n            // если в нем был пользователь - удаляем его из чата\n            groupUsersStore.usersData.splice(i, 1);\n            break;\n          }\n        }\n      }\n    });\n    sse.addEventListener(\"message\", msg => {\n      // обрботка сообщений чата\n      const data = JSON.parse(msg.data);\n      console.log(data);\n      var newMessage = true;\n      messagesStore.messagesData.map((message, index) => {\n        if (message.id === data.id) {\n          // если уже такое сообщение есть - обновить его\n          messagesStore.messagesData[index] = data;\n          newMessage = false;\n        }\n      });\n\n      if (newMessage) {\n        // если сообщение новое - добавить в хранилище\n        messagesStore.addEntry(data);\n      }\n    });\n    sse.addEventListener(\"user-in-chat\", user => {\n      // обработка добавления пользователей в чат\n      const data = JSON.parse(user.data);\n      const oldName = JSON.parse(user.data).oldName;\n      console.log(data);\n      var newUser = true;\n\n      if (data.id === groupUsersStore.chatId) {\n        for (var i = 0; i < groupUsersStore.usersData.length; i++) {\n          if (data.name === groupUsersStore.usersData[i].name) {\n            // если данные о профиле пользователя были изменены (кроме имени), пока мы посещали чат - обновить информацию\n            groupUsersStore.usersData[i].picture = data.picture;\n            groupUsersStore.usersData[i].time = data.time;\n            groupUsersStore.usersData[i].role = data.role;\n            newUser = false;\n            break;\n          } else {\n            if (oldName === groupUsersStore.usersData[i].name) {\n              // если было изменено имя пользователя, пока мы посещали чат - обновить информацию\n              groupUsersStore.usersData[i].name = data.name;\n              groupUsersStore.usersData[i].picture = data.picture;\n              groupUsersStore.usersData[i].time = data.time;\n              groupUsersStore.usersData[i].role = data.role;\n              newUser = false;\n              break;\n            }\n          }\n        }\n\n        if (newUser) {\n          // если пользователь новый - добавить в чат\n          groupUsersStore.addEntry(data);\n        }\n      }\n    });\n    sse.addEventListener(\"user-info\", user => {\n      // обработка информации о данных профиля пользователя\n      const data = JSON.parse(user.data);\n      const oldName = JSON.parse(user.data).oldName;\n      console.log(data);\n\n      if (profileStore.profileData.name === '') {\n        // если данные о профиле новые - добавляем информацию\n        profileStore.profileData = data;\n      } else {\n        if (data.name === profileStore.profileData.name) {\n          // если данные о профиле были изменены (кроме имени), пока мы посещали страницу - обновить информацию\n          profileStore.profileData.picture = data.picture;\n          profileStore.profileData.bio = data.bio;\n        } else {\n          if (oldName === profileStore.profileData.name) {\n            // если было изменено имя пользователя, пока мы посещали страницу - обновить информацию\n            profileStore.profileData.name = data.name;\n            profileStore.profileData.picture = data.picture;\n            profileStore.profileData.bio = data.bio;\n          }\n        }\n      }\n    });\n    sse.addEventListener(\"user-status\", user => {\n      // обработка информации о последнем времени пребывания пользователя \"онлайн\"\n      const name = JSON.parse(user.data).name;\n      const time = new Date(JSON.parse(user.data).time);\n      onlineStatusStore.userTimes.set(name, time); // обновляем / добавлям информацию о последнем пребывании пользователяв \"онлайн\" \n    });\n\n    sse.onerror = e => {\n      // обработка ошибки отключения от ссе\n      clearInterval(online); // прекращение отсылки на сервер сообщения о том, что польщователь \"онлайн\"\n\n      console.error(\"closing sse chanel because ofan error\", e);\n      sse.close();\n    };\n\n    return () => {\n      // отключение от ссе\n      clearInterval(online); // прекращение отсылки на сервер сообщения о том, что польщователь \"онлайн\"\n\n      console.log(\"closing sse chanel\");\n      sse.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateListener, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = UpdateListener;\nexport default UpdateListener;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateListener\");","map":{"version":3,"sources":["/home/maria/Messenger-for-Exactpro/client-master/src/components/UpdateListener.tsx"],"names":["React","useEffect","Requests","UpdateListener","chatsStore","messagesStore","groupUsersStore","profileStore","onlineStatusStore","online","setInterval","request","Alive","status","alert","sse","SseSubscribe","console","log","addEventListener","upd","data","JSON","parse","newChat","i","chatsData","length","id","title","bio","type","picture","role","addEntry","chatId","splice","messageId","messagesData","userName","name","usersData","msg","newMessage","map","message","index","user","oldName","newUser","time","profileData","Date","userTimes","set","onerror","e","clearInterval","error","close"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport Requests from '../Requests'\nimport ChatsStore from '../stores/ChatsStore'\nimport MessagesStore from '../stores/MessagesStore'\nimport GroupUsersStore from '../stores/GroupUsersStore'\nimport ProfileStore from '../stores/ProfileStore'\nimport OnlineStatusStore from '../stores/OnlineStatusStore'\nimport {ChatsUpdate} from '../interfaces/ChatsUpdate'\nimport {MessagesUpdate} from '../interfaces/MessagesUpdate'\nimport { ChatUser } from \"../interfaces/ChatUser\"\nimport {ProfileInfo} from '../interfaces/ProfileInfo'\n\n// Обработка подписок Sse\nconst UpdateListener = ({chatsStore, messagesStore, groupUsersStore, profileStore, onlineStatusStore}:{chatsStore: ChatsStore, messagesStore: MessagesStore, groupUsersStore: GroupUsersStore, profileStore: ProfileStore, onlineStatusStore: OnlineStatusStore}) =>{\n\n    useEffect(()=>{\n        \n        // Оповещение сервера о том, что пользователь \"онлайн\"\n        const online = setInterval(()=>{\n            var request: {responseText: string, status: number} | null = Requests.Alive()\n            switch(request?.status){\n                case 0:\n                    break\n                case 200:\n                    break\n                case 401:\n                    alert(\"User is not logged in.\")\n                    break\n                default:\n                    alert(\"Error.\")\n                    break\n            }\n        }, 15000)\n\n        const sse: EventSource = Requests.SseSubscribe() // Подписка на ссе\n        console.log(\"subscribe to sse channel\")\n\n        sse.addEventListener(\"update\", upd =>{ // обработка новых и измененных чатов\n            console.log(upd)\n            console.log((typeof upd) != 'string')\n            if((typeof upd) != 'string' && (typeof (upd as MessageEvent).data) !== 'string'){\n                const data: ChatsUpdate = JSON.parse((upd as MessageEvent).data) as ChatsUpdate\n                console.log(data)\n                var newChat: boolean = true\n                for(var i = 0; i < chatsStore.chatsData.length; i++){\n                    if (data.id === chatsStore.chatsData[i].id){ // если чат уже есть - изменяем его данные \n                        chatsStore.chatsData[i].title = data.title\n                        chatsStore.chatsData[i].bio = data.bio\n                        chatsStore.chatsData[i].type = data.type\n                        chatsStore.chatsData[i].picture = data.picture\n                        chatsStore.chatsData[i].role = data.role\n                        newChat = false\n                        break\n                    }\n                }\n                if (newChat){ // если чата нет - добавляем\n                    chatsStore.addEntry(data)\n                }\n            }\n            })\n            \n           \n\n        sse.addEventListener(\"chat-is-deleted\", data =>{ // обработка удаленных чатов\n            var chatId: string = JSON.parse((data as MessageEvent).data).id\n            console.log(data)\n            for(var i = 0; i < chatsStore.chatsData.length; i++){ \n                if (chatId === chatsStore.chatsData[i].id){ // если чат есть - удаляем\n                    chatsStore.chatsData.splice(i, 1)\n                    break\n                }\n            }\n        })\n\n        sse.addEventListener(\"message-is-deleted\", data =>{ // обработка удаленных сообщений\n            var messageId: string = JSON.parse((data as MessageEvent).data).id\n            console.log(messageId)\n            for(var i = 0; i < messagesStore.messagesData.length; i++){\n                if (messageId === messagesStore.messagesData[i].id){ // если сообщение есть - удаляем\n                    messagesStore.messagesData.splice(i, 1)\n                    break\n                }\n            }\n        })\n\n        sse.addEventListener(\"user-is-deleted\", data =>{ // обработка удаленного пользователя из чата\n            var chatId: string = JSON.parse((data as MessageEvent).data).id\n            var userName: string = JSON.parse((data as MessageEvent).data).name\n            console.log(userName)\n            console.log(groupUsersStore.usersData.length)\n            if (chatId === groupUsersStore.chatId){ // если открыт данный чат\n                for(var i = 0; i < groupUsersStore.usersData.length; i++){\n                    console.log(groupUsersStore.usersData[i].name)\n                    if (userName === groupUsersStore.usersData[i].name){ // если в нем был пользователь - удаляем его из чата\n                        groupUsersStore.usersData.splice(i, 1)\n                        break\n                    }\n                }\n            }\n        })\n\n        sse.addEventListener(\"message\", msg =>{ // обрботка сообщений чата\n            const data: MessagesUpdate = JSON.parse((msg as MessageEvent).data) as MessagesUpdate\n            console.log(data)\n            var newMessage: boolean = true\n            messagesStore.messagesData.map((message: MessagesUpdate, index: number)=>{\n                if(message.id === data.id){ // если уже такое сообщение есть - обновить его\n                    messagesStore.messagesData[index] = data\n                    newMessage = false\n                }\n            })\n            if (newMessage){ // если сообщение новое - добавить в хранилище\n                messagesStore.addEntry(data)\n            }\n        })\n\n        sse.addEventListener(\"user-in-chat\", user =>{ // обработка добавления пользователей в чат\n            const data: ChatUser = JSON.parse((user as MessageEvent).data) as ChatUser\n            const oldName: string = JSON.parse((user as MessageEvent).data).oldName\n            console.log(data)\n            var newUser: boolean = true\n            if (data.id === groupUsersStore.chatId){\n                for(var i = 0; i < groupUsersStore.usersData.length; i++){\n                    if (data.name === groupUsersStore.usersData[i].name){  // если данные о профиле пользователя были изменены (кроме имени), пока мы посещали чат - обновить информацию\n                        groupUsersStore.usersData[i].picture = data.picture\n                        groupUsersStore.usersData[i].time = data.time\n                        groupUsersStore.usersData[i].role = data.role\n                        newUser = false\n                        break\n                    }\n                    else{\n                        if (oldName === groupUsersStore.usersData[i].name){ // если было изменено имя пользователя, пока мы посещали чат - обновить информацию\n                            groupUsersStore.usersData[i].name = data.name\n                            groupUsersStore.usersData[i].picture = data.picture\n                            groupUsersStore.usersData[i].time = data.time\n                            groupUsersStore.usersData[i].role = data.role\n                            newUser = false\n                            break\n                        }\n                    }\n                }\n                if (newUser){ // если пользователь новый - добавить в чат\n                    groupUsersStore.addEntry(data)\n                }\n            }\n        })\n\n        sse.addEventListener(\"user-info\", user =>{ // обработка информации о данных профиля пользователя\n            const data: ProfileInfo = JSON.parse((user as MessageEvent).data) as ProfileInfo\n            const oldName: string = JSON.parse((user as MessageEvent).data).oldName\n            console.log(data)\n            if (profileStore.profileData.name === ''){ // если данные о профиле новые - добавляем информацию\n                profileStore.profileData = data;\n            }\n            else{\n                if (data.name === profileStore.profileData.name){ // если данные о профиле были изменены (кроме имени), пока мы посещали страницу - обновить информацию\n                    profileStore.profileData.picture = data.picture\n                    profileStore.profileData.bio = data.bio\n                }\n                else{\n                    if (oldName === profileStore.profileData.name){ // если было изменено имя пользователя, пока мы посещали страницу - обновить информацию\n                        profileStore.profileData.name = data.name\n                        profileStore.profileData.picture = data.picture\n                        profileStore.profileData.bio = data.bio\n                    }\n                }\n            }\n        })\n\n        sse.addEventListener(\"user-status\", user =>{ // обработка информации о последнем времени пребывания пользователя \"онлайн\"\n            const name = JSON.parse((user as MessageEvent).data).name\n            const time = new Date(JSON.parse((user as MessageEvent).data).time)\n            onlineStatusStore.userTimes.set(name, time) // обновляем / добавлям информацию о последнем пребывании пользователяв \"онлайн\" \n        })\n\n        sse.onerror = (e) => { // обработка ошибки отключения от ссе\n            clearInterval(online) // прекращение отсылки на сервер сообщения о том, что польщователь \"онлайн\"\n            console.error(\"closing sse chanel because ofan error\", e)\n            sse.close() \n        }\n\n        return() => { // отключение от ссе\n            clearInterval(online) // прекращение отсылки на сервер сообщения о том, что польщователь \"онлайн\"\n            console.log(\"closing sse chanel\")\n            sse.close() \n        }\n    }, []\n    )\n\n    return (\n        <React.Fragment/>\n    )\n}\n\nexport default UpdateListener"]},"metadata":{},"sourceType":"module"}