{"ast":null,"code":"var _jsxFileName = \"/Users/andrejturin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Messenger-for-Exactpro/client-master/src/components/CreateChat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport Requests from '../Requests';\nimport Profile from './Profile';\nimport UserAvatar from './UserAvatar';\nimport { AppBar, Avatar, Button, Checkbox, Container, FormControlLabel, Grid, IconButton, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Switch, TextField, Toolbar, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport MessageIcon from '@material-ui/icons/Message';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar userProfile = ''; // Создание чата \n\nconst CreateChat = observer(_c = _s(({\n  users,\n  profileStore,\n  onlineStatusStore,\n  Done\n}) => {\n  _s();\n\n  const createDirect = 'CreateDirect'; // элемент\n\n  const profile = 'Profile'; // элемент\n\n  const createGroupChat = 'CreateGroupChat'; // элемент \n\n  const [item, setItem] = useState(createDirect); // Отобаражаемый элемент\n\n  const [lastItem, setLastItem] = useState(''); // Последний отображаемый элемент\n\n  const [groupChatName, setGroupChatName] = useState(\"\"); // Навзание\n\n  const [groupChatBio, setGroupChatBio] = useState(\"\"); // Био\n\n  const [groupChatPicture, setGroupChatPicture] = useState(''); // Фото\n\n  const [groupChatSmartType, setGroupChatSmartType] = useState(false); // Тип\n\n  const [groupChatUsers, setGroupChatUsers] = useState(users.map(() => {\n    return false;\n  })); // Пользователи\n\n  const smartChat = '2'; // умный чат\n\n  const simpleChat = '3'; // простой чат\n\n  const useStyles = makeStyles(theme => // стили\n  createStyles({\n    content: {\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden'\n    },\n    header: {\n      position: \"static\",\n      flexGrow: 1,\n      height: '10%'\n    },\n    headerButton: {\n      marginLeft: theme.spacing(2),\n      color: 'white',\n      background: '#3d50b6'\n    },\n    createPrivateChat: {\n      width: '100%',\n      position: 'relative',\n      overflow: 'scroll',\n      height: '90%'\n    },\n    profileInfo: {\n      marginTop: theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      alignItems: 'center'\n    },\n    root: {\n      flexGrow: 1\n    },\n    root1: {\n      width: '100%',\n      position: 'relative',\n      overflow: 'auto',\n      height: 500\n    },\n    paper: {\n      marginTop: theme.spacing(4),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      height: '100%'\n    },\n    addButton: {\n      textAlign: 'right'\n    },\n    title: {\n      flexGrow: 1\n    },\n    smallAvatar: {\n      width: theme.spacing(5),\n      height: theme.spacing(5)\n    },\n    largeAvatar: {\n      width: theme.spacing(15),\n      height: theme.spacing(15)\n    },\n    cancelButton: {\n      marginRight: theme.spacing(2),\n      color: 'white',\n      background: '#3d50b6'\n    },\n    saveButton: {\n      marginRight: theme.spacing(2),\n      color: 'white',\n      background: '#3d50b6'\n    },\n    createNewGroupButton: {\n      variant: \"contained\",\n      color: \"primary\"\n    },\n    createNewDialogButton: {\n      variant: \"contained\",\n      color: \"primary\"\n    },\n    setNewPhotoButton: {},\n    editNameButton: {},\n    editBioButton: {},\n    nameInput: {},\n    deletePhotoButton: {\n      background: 'red'\n    },\n    formControl: {\n      margin: theme.spacing(3)\n    },\n    members: {\n      overflow: 'auto',\n      width: 100\n    },\n    demo: {\n      backgroundColor: theme.palette.background.paper\n    }\n  }));\n  const classes = useStyles(); // классы для стилей\n  // открытие профиля\n\n  function OpenProfile() {\n    profileStore.Clear(); // очитска данных о предыдущем профиле\n\n    var request = Requests.OpenProfile(userProfile); // запрос на открытие профиля\n\n    switch (request === null || request === void 0 ? void 0 : request.status) {\n      case 200:\n        break;\n\n      case 401:\n        alert(\"User is not logged in.\");\n        break;\n\n      default:\n        alert(\"Error.\");\n        break;\n    }\n  } // загрузка файла\n\n\n  function LoadPic(event) {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => {\n      var _reader$result;\n\n      // событие при загрузки файла\n      var file = (_reader$result = reader.result) === null || _reader$result === void 0 ? void 0 : _reader$result.toString();\n\n      if (file) {\n        setGroupChatPicture(file);\n      }\n    });\n\n    reader.onerror = error => {\n      // событие при ошибке при загрузке файла\n      alert('Error: ' + error);\n    };\n\n    reader.readAsDataURL(event.target.files[0]); // загрузка файла\n  } // создание личного диалога\n\n\n  function CreatePrivateChat(user) {\n    let data = {\n      // подготовка данных для отправки на сервер\n      user: user\n    };\n    var request = Requests.CratePrivateChat(data); // запрос на сервер о создании личного диалога\n\n    switch (request === null || request === void 0 ? void 0 : request.status) {\n      case 200:\n        Done(JSON.parse(request.responseText).chatId); // открытие диалога\n\n        break;\n\n      case 401:\n        alert(\"User is not logged in.\");\n        break;\n\n      case 409:\n        Done(JSON.parse(request.responseText).chatId); // открытие диалога, если он уже создан\n\n        break;\n\n      default:\n        alert(\"Error.\");\n        break;\n    }\n  } // создание группового чата\n\n\n  function CreateGroupChat() {\n    var chatUsers = [];\n    users.map((user, index) => {\n      // определение отмеченных пользователей для добавления в чат\n      if (groupChatUsers[index]) {\n        chatUsers.push(user.name);\n      }\n    });\n\n    if (chatUsers.length !== 0 && groupChatName !== \"\") {\n      // если выбраны пользователи и задано имя чата\n      let data = {\n        // подготовка данных для отправки на сервер\n        users: chatUsers,\n        chatName: groupChatName,\n        picture: groupChatPicture,\n        type: groupChatSmartType ? smartChat : simpleChat,\n        bio: groupChatBio\n      };\n      var request = Requests.CreateGroupChat(data); // запрос на сервер о создании группового чата\n\n      switch (request === null || request === void 0 ? void 0 : request.status) {\n        case 200:\n          Done(JSON.parse(request.responseText).chatId); // Открытие чата\n\n          break;\n\n        case 401:\n          alert(\"User is not logged in.\");\n          break;\n\n        case 409:\n          alert(\"Chat creation error.\");\n          break;\n\n        default:\n          alert(\"Error.\");\n          break;\n      }\n    } else {\n      alert('Name the chat and add users.');\n    }\n  }\n\n  function SetItem() {\n    switch (item) {\n      case createDirect:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.content,\n          children: [/*#__PURE__*/_jsxDEV(AppBar, {\n            className: classes.header,\n            children: /*#__PURE__*/_jsxDEV(Toolbar, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => Done(null),\n                className: classes.headerButton,\n                variant: \"outlined\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            dense: true,\n            className: classes.createPrivateChat,\n            children: [/*#__PURE__*/_jsxDEV(ListItem, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => setItem(createGroupChat),\n                className: classes.createNewGroupButton,\n                fullWidth: true,\n                children: \"New group\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 19\n            }, this), users.map((user, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n              children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                children: /*#__PURE__*/_jsxDEV(UserAvatar, {\n                  user: {\n                    name: user.name,\n                    picture: user.picture\n                  },\n                  onlineStatusStore: onlineStatusStore,\n                  size: 5\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: user.name,\n                onClick: () => {\n                  userProfile = user.name;\n                  setLastItem(createDirect);\n                  setItem(profile);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"add\",\n                  onClick: () => CreatePrivateChat(user.name),\n                  children: /*#__PURE__*/_jsxDEV(MessageIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this);\n\n      case createGroupChat:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(AppBar, {\n            position: \"static\",\n            children: /*#__PURE__*/_jsxDEV(Toolbar, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => Done(null),\n                className: classes.cancelButton,\n                variant: \"outlined\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.title,\n                variant: \"h6\",\n                noWrap: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => CreateGroupChat(),\n                className: classes.saveButton,\n                variant: \"outlined\",\n                children: \"Done\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Container, {\n            className: classes.profileInfo,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: true,\n                className: classes.paper,\n                children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                  src: groupChatPicture,\n                  className: classes.largeAvatar\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  component: \"label\",\n                  className: classes.setNewPhotoButton,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    onChange: event => LoadPic(event),\n                    hidden: true,\n                    accept: \".png, .jpg, .jpeg, .svg\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 25\n                  }, this), \"Set A Photo\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 23\n                }, this), groupChatPicture !== '' ? /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  className: classes.deletePhotoButton,\n                  onClick: () => setGroupChatPicture(''),\n                  children: [/*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 27\n                  }, this), \"Delete\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 25\n                }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    label: \"Name\",\n                    variant: \"standard\",\n                    value: groupChatName,\n                    className: classes.editNameButton,\n                    onChange: event => setGroupChatName(event.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    label: \"Bio\",\n                    variant: \"standard\",\n                    value: groupChatBio,\n                    className: classes.editBioButton,\n                    onChange: event => setGroupChatBio(event.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Switch, {\n                      color: \"primary\",\n                      checked: groupChatSmartType,\n                      onChange: event => setGroupChatSmartType(event.target.checked)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 376,\n                      columnNumber: 36\n                    }, this),\n                    label: \"Smart Type\",\n                    labelPlacement: \"start\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: true,\n                className: classes.paper,\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h6\",\n                    className: classes.title,\n                    children: \"Members\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 390,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.demo,\n                    children: /*#__PURE__*/_jsxDEV(List, {\n                      dense: true,\n                      className: classes.root1,\n                      children: users.map((user, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n                        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                          children: /*#__PURE__*/_jsxDEV(UserAvatar, {\n                            user: {\n                              name: user.name,\n                              picture: user.picture\n                            },\n                            onlineStatusStore: onlineStatusStore,\n                            size: 5\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 406,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 405,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                          primary: user.name,\n                          onClick: () => {\n                            userProfile = user.name;\n                            setLastItem(createGroupChat);\n                            setItem(profile);\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 412,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                            color: \"primary\",\n                            edge: \"end\",\n                            checked: groupChatUsers[index],\n                            onChange: () => setGroupChatUsers(groupChatUsers.map((user, index1) => {\n                              if (index1 === index) {\n                                return !groupChatUsers[index1];\n                              } else {\n                                return groupChatUsers[index1];\n                              }\n                            }))\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 417,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 416,\n                          columnNumber: 33\n                        }, this)]\n                      }, index, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 404,\n                        columnNumber: 31\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 399,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 396,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this);\n\n      case profile:\n        OpenProfile();\n        return /*#__PURE__*/_jsxDEV(Profile, {\n          profileStore: profileStore,\n          onlineStatusStore: onlineStatusStore,\n          Change: false,\n          Done: () => {\n            lastItem === createGroupChat ? setItem(createGroupChat) : setItem(createDirect);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }, this);\n    }\n  }\n\n  return SetItem();\n}, \"zEO/1o9WC3RG1IuscetGACxC+pA=\", false, function () {\n  return [useStyles];\n}));\n_c2 = CreateChat;\nexport default CreateChat;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CreateChat$observer\");\n$RefreshReg$(_c2, \"CreateChat\");","map":{"version":3,"sources":["/Users/andrejturin/Документы/Messenger-for-Exactpro/client-master/src/components/CreateChat.tsx"],"names":["React","useState","observer","Requests","Profile","UserAvatar","AppBar","Avatar","Button","Checkbox","Container","FormControlLabel","Grid","IconButton","List","ListItem","ListItemAvatar","ListItemSecondaryAction","ListItemText","Switch","TextField","Toolbar","Typography","createStyles","makeStyles","MessageIcon","DeleteIcon","userProfile","CreateChat","users","profileStore","onlineStatusStore","Done","createDirect","profile","createGroupChat","item","setItem","lastItem","setLastItem","groupChatName","setGroupChatName","groupChatBio","setGroupChatBio","groupChatPicture","setGroupChatPicture","groupChatSmartType","setGroupChatSmartType","groupChatUsers","setGroupChatUsers","map","smartChat","simpleChat","useStyles","theme","content","width","height","overflow","header","position","flexGrow","headerButton","marginLeft","spacing","color","background","createPrivateChat","profileInfo","marginTop","display","flexDirection","alignItems","root","root1","paper","addButton","textAlign","title","smallAvatar","largeAvatar","cancelButton","marginRight","saveButton","createNewGroupButton","variant","createNewDialogButton","setNewPhotoButton","editNameButton","editBioButton","nameInput","deletePhotoButton","formControl","margin","members","demo","backgroundColor","palette","classes","OpenProfile","Clear","request","status","alert","LoadPic","event","reader","FileReader","addEventListener","file","result","toString","onerror","error","readAsDataURL","target","files","CreatePrivateChat","user","data","CratePrivateChat","JSON","parse","responseText","chatId","CreateGroupChat","chatUsers","index","push","name","length","chatName","picture","type","bio","SetItem","value","checked","index1"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, useState} from 'react'\nimport { observer } from 'mobx-react'\nimport Requests from '../Requests'\nimport Profile from './Profile'\nimport UserAvatar from './UserAvatar'\nimport OnlineStatusStore from '../stores/OnlineStatusStore'\nimport ProfileStore from '../stores/ProfileStore'\nimport { UserInfo } from '../interfaces/UserInfo'\nimport { AppBar, Avatar, Button, Checkbox, Container, CssBaseline, FormControlLabel, Grid, IconButton, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Switch, TextField, Toolbar, Typography } from '@material-ui/core'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport MessageIcon from '@material-ui/icons/Message'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nvar userProfile: string = ''\n\n// Создание чата \nconst CreateChat = observer(({users, profileStore, onlineStatusStore, Done}: { users: UserInfo[], profileStore: ProfileStore, onlineStatusStore: OnlineStatusStore, Done: (chatId: string | null) => void}) => {\n\n  const createDirect = 'CreateDirect' // элемент\n  const profile = 'Profile' // элемент\n  const createGroupChat = 'CreateGroupChat' // элемент \n  const [item, setItem] = useState<string>(createDirect) // Отобаражаемый элемент\n  const [lastItem, setLastItem] = useState<string>('') // Последний отображаемый элемент\n  const [groupChatName, setGroupChatName] = useState<string>(\"\") // Навзание\n  const [groupChatBio, setGroupChatBio] = useState<string>(\"\") // Био\n  const [groupChatPicture, setGroupChatPicture] = useState<string>('') // Фото\n  const [groupChatSmartType, setGroupChatSmartType] = useState<boolean>(false) // Тип\n  const [groupChatUsers, setGroupChatUsers] = useState<boolean[]>(users.map(()=>{ return false })) // Пользователи\n  const smartChat = '2' // умный чат\n  const simpleChat = '3' // простой чат\n\n  const useStyles = makeStyles((theme: Theme) => // стили\n    createStyles({\n      content: {\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden'\n      },\n      header: {\n          position: \"static\",\n          flexGrow: 1,\n          height: '10%'\n      },\n      headerButton: {\n          marginLeft: theme.spacing(2),\n          color: 'white',\n          background: '#3d50b6'\n      },\n      createPrivateChat: {\n        width: '100%',\n        position: 'relative',\n        overflow: 'scroll',\n        height: '90%'\n      },\n      profileInfo: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        alignItems: 'center'\n      },\n      root: {\n        flexGrow: 1\n      },\n      root1: {\n        width: '100%',\n        position: 'relative',\n        overflow: 'auto',\n        height: 500\n      },  \n      paper: {\n        marginTop: theme.spacing(4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        height: '100%'\n      },\n      addButton: {\n        textAlign: 'right'\n      },\n      title: {\n        flexGrow: 1\n      },\n      smallAvatar: {\n        width: theme.spacing(5),\n        height: theme.spacing(5)\n      },\n      largeAvatar: {\n        width: theme.spacing(15),\n        height: theme.spacing(15)\n      },\n      cancelButton: {\n        marginRight: theme.spacing(2),\n        color: 'white',\n        background: '#3d50b6'\n      },\n      saveButton: {\n        marginRight: theme.spacing(2),\n        color: 'white',\n        background: '#3d50b6'\n      },  \n      createNewGroupButton: {\n        variant: \"contained\",\n        color: \"primary\"\n      },\n      createNewDialogButton: {\n        variant: \"contained\",\n        color: \"primary\"\n      },\n      setNewPhotoButton: {\n\n      },\n      editNameButton: {\n\n      },\n      editBioButton: {\n\n      },\n      nameInput: {\n\n      },\n      deletePhotoButton: {\n        background: 'red'\n      },\n      formControl: {\n        margin: theme.spacing(3)\n      },\n      members: {\n        overflow: 'auto',\n        width: 100\n      },\n      demo: {\n        backgroundColor: theme.palette.background.paper\n      }\n    })\n  )\n  const classes = useStyles() // классы для стилей\n\n  // открытие профиля\n  function OpenProfile(): void {\n    profileStore.Clear() // очитска данных о предыдущем профиле\n    var request: {responseText: string, status: number} | null = Requests.OpenProfile(userProfile) // запрос на открытие профиля\n    switch(request?.status){\n      case 200:\n        break\n      case 401:\n        alert(\"User is not logged in.\")\n        break\n      default:\n        alert(\"Error.\")\n        break\n    }     \n  }\n\n  // загрузка файла\n  function LoadPic(event: any){\n    const reader: FileReader = new FileReader()\n    reader.addEventListener(\"load\", ()=>{ // событие при загрузки файла\n      var file: string | undefined = reader.result?.toString()\n      if(file){\n        setGroupChatPicture(file)\n      }\n    })\n    reader.onerror = (error) => { // событие при ошибке при загрузке файла\n      alert('Error: ' + error)\n    }\n    reader.readAsDataURL(event.target.files[0]) // загрузка файла\n  }\n\n  // создание личного диалога\n  function CreatePrivateChat(user: string): void{\n    let data = { // подготовка данных для отправки на сервер\n      user: user\n    }\n    var request: {responseText: string, status: number} | null = Requests.CratePrivateChat(data) // запрос на сервер о создании личного диалога\n    switch(request?.status){\n      case 200:\n        Done(JSON.parse(request.responseText).chatId) // открытие диалога\n        break\n      case 401:\n        alert(\"User is not logged in.\")\n        break\n      case 409:\n        Done(JSON.parse(request.responseText).chatId) // открытие диалога, если он уже создан\n        break\n      default:\n        alert(\"Error.\")\n        break\n    }\n  }\n\n  // создание группового чата\n  function CreateGroupChat(): void{\n    var chatUsers: string [] = []\n    users.map((user: UserInfo, index: number)=>{ // определение отмеченных пользователей для добавления в чат\n      if (groupChatUsers[index]){\n        chatUsers.push(user.name) \n      }\n    })\n    if (chatUsers.length !== 0 && groupChatName !== \"\"){ // если выбраны пользователи и задано имя чата\n      let data: {users: string[], chatName: string, picture: string, type: string, bio: string} = { // подготовка данных для отправки на сервер\n        users: chatUsers,\n        chatName: groupChatName,\n        picture: groupChatPicture,\n        type: groupChatSmartType ? smartChat : simpleChat,\n        bio: groupChatBio\n      }\n      var request: {responseText: string, status: number} | null = Requests.CreateGroupChat(data) // запрос на сервер о создании группового чата\n      switch(request?.status){\n        case 200:\n          Done(JSON.parse(request.responseText).chatId) // Открытие чата\n          break\n        case 401:\n          alert(\"User is not logged in.\")\n          break\n        case 409:\n          alert(\"Chat creation error.\")\n          break\n        default:\n          alert(\"Error.\")\n          break\n      }\n    }\n    else{\n      alert('Name the chat and add users.')\n    }\n  }\n\n  function SetItem(): JSX.Element {\n    switch(item){\n        case createDirect:\n          return(\n              <div \n                className={classes.content}\n              >\n                <AppBar \n                  className={classes.header}\n                >\n                  <Toolbar>\n                    <Button\n                      onClick={()=>Done(null)}\n                      className={classes.headerButton}\n                      variant=\"outlined\"\n                    >\n                      Cancel\n                    </Button>\n                  </Toolbar>\n                </AppBar>\n                <List \n                  dense={true}\n                  className={classes.createPrivateChat}\n                >\n                  <ListItem>\n                    <Button \n                      onClick={()=>setItem(createGroupChat)}\n                      className={classes.createNewGroupButton}\n                      fullWidth\n                    >\n                      New group\n                    </Button>\n                  </ListItem>\n                  {users.map((user: UserInfo, index: number) =>\n                    <ListItem \n                      key={index}\n                    >\n                      <ListItemAvatar>\n                        <UserAvatar \n                          user={{name: user.name, picture: user.picture}} \n                          onlineStatusStore={onlineStatusStore}\n                          size={5}\n                        />\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={user.name}\n                        onClick={()=>{userProfile = user.name; setLastItem(createDirect); setItem(profile)}}\n                      />\n                      <ListItemSecondaryAction>\n                        <IconButton \n                          edge=\"end\" \n                          aria-label=\"add\"\n                          onClick={()=>CreatePrivateChat(user.name)}\n                        >\n                          <MessageIcon/>\n                        </IconButton>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  )}\n                </List>\n              </div>\n          )\n        case createGroupChat:\n          return(\n            <div>\n              <AppBar position=\"static\">\n                <Toolbar>\n                  <Button\n                    onClick={()=>Done(null)}\n                    className={classes.cancelButton}\n                    variant=\"outlined\"\n                  >\n                    Cancel\n                  </Button>\n                  <Typography \n                    className={classes.title}\n                    variant=\"h6\" \n                    noWrap\n                  />\n                  <Button\n                    onClick={()=>CreateGroupChat()}\n                    className={classes.saveButton}\n                    variant=\"outlined\"\n                  >\n                    Done\n                  </Button>\n                </Toolbar>\n              </AppBar>\n              <Container\n                className={classes.profileInfo}\n              >\n                  <Grid\n                    container\n                  >\n                    <Grid\n                      item\n                      xs\n                      className={classes.paper}\n                    >\n                      <Avatar \n                        src={groupChatPicture} \n                        className={classes.largeAvatar}\n                      />\n                      <Button\n                        variant=\"outlined\"\n                        component=\"label\"\n                        className={classes.setNewPhotoButton}\n                      >\n                        <input\n                            type=\"file\"\n                            onChange={event=>LoadPic(event)}\n                            hidden\n                            accept=\".png, .jpg, .jpeg, .svg\"\n                        />\n                        Set A Photo\n                      </Button>\n                      {groupChatPicture !== '' ?\n                        <Button\n                          variant=\"contained\"\n                          className={classes.deletePhotoButton}\n                          onClick={()=>setGroupChatPicture('')}\n                        >\n                          <DeleteIcon />\n                          Delete\n                        </Button>\n                      : null\n                      }\n                      <div>\n                        <TextField\n                          label=\"Name\"\n                          variant=\"standard\"\n                          value={groupChatName}\n                          className={classes.editNameButton}\n                          onChange={event=>setGroupChatName(event.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <TextField\n                          label=\"Bio\"\n                          variant=\"standard\"\n                          value={groupChatBio}\n                          className={classes.editBioButton}\n                          onChange={event=>setGroupChatBio(event.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <FormControlLabel\n                          control={<Switch color=\"primary\" checked={groupChatSmartType} onChange={(event: ChangeEvent<HTMLInputElement>)=>setGroupChatSmartType(event.target.checked)} />}\n                          label=\"Smart Type\"\n                          labelPlacement=\"start\"\n                        />\n                      </div>\n                    </Grid>\n                    <Grid\n                      item\n                      xs\n                      className={classes.paper}\n                    >\n                      <Grid \n                        item\n                      >\n                        <Typography\n                          variant=\"h6\" \n                          className={classes.title}\n                        >\n                          Members\n                        </Typography>\n                        <div \n                          className={classes.demo}\n                        >\n                          <List \n                            dense={true}\n                            className={classes.root1}\n                          >\n                            {users.map((user: UserInfo, index: number) =>\n                              <ListItem key={index}>\n                                <ListItemAvatar>\n                                  <UserAvatar \n                                    user={{name: user.name, picture: user.picture}} \n                                    onlineStatusStore={onlineStatusStore}\n                                    size={5}\n                                  />\n                                </ListItemAvatar>\n                                <ListItemText\n                                  primary={user.name}\n                                  onClick={()=>{userProfile = user.name; setLastItem(createGroupChat); setItem(profile)}}\n                                />\n                                <ListItemSecondaryAction>\n                                  <Checkbox\n                                    color=\"primary\"\n                                    edge=\"end\"\n                                    checked={groupChatUsers[index]} \n                                    onChange={()=>setGroupChatUsers(groupChatUsers.map((user: boolean,index1: number)=>{if(index1 === index) {return !groupChatUsers[index1]} else{ return groupChatUsers[index1]}}))}\n                                  />\n                                </ListItemSecondaryAction>\n                              </ListItem>,\n                            )}\n                          </List>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n              </Container>\n            </div>\n          )\n        case profile:\n          OpenProfile()\n          return(\n            <Profile \n              profileStore={profileStore} \n              onlineStatusStore={onlineStatusStore}\n              Change={false} \n              Done={()=>{lastItem === createGroupChat ? setItem(createGroupChat) : setItem(createDirect)}}\n            />\n          )\n        default:\n          return(\n            <React.Fragment/>\n          )\n    }\n  }\n  \n  return(\n    SetItem()\n  )\n})\n\nexport default CreateChat"]},"metadata":{},"sourceType":"module"}