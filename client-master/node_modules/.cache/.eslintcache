[{"/home/maria/Messenger-for-Exactpro/client-master/src/index.tsx":"1","/home/maria/Messenger-for-Exactpro/client-master/src/reportWebVitals.ts":"2","/home/maria/Messenger-for-Exactpro/client-master/src/App.tsx":"3","/home/maria/Messenger-for-Exactpro/client-master/src/stores/OnlineStatusStore.ts":"4","/home/maria/Messenger-for-Exactpro/client-master/src/stores/MessagesStore.ts":"5","/home/maria/Messenger-for-Exactpro/client-master/src/stores/ChatsStore.ts":"6","/home/maria/Messenger-for-Exactpro/client-master/src/stores/GroupUsersStore.ts":"7","/home/maria/Messenger-for-Exactpro/client-master/src/stores/ProfileStore.ts":"8","/home/maria/Messenger-for-Exactpro/client-master/src/components/Authorization.tsx":"9","/home/maria/Messenger-for-Exactpro/client-master/src/components/Messenger.tsx":"10","/home/maria/Messenger-for-Exactpro/client-master/src/components/UpdateListener.tsx":"11","/home/maria/Messenger-for-Exactpro/client-master/src/Cookie.ts":"12","/home/maria/Messenger-for-Exactpro/client-master/src/Requests.ts":"13","/home/maria/Messenger-for-Exactpro/client-master/src/components/Profile.tsx":"14","/home/maria/Messenger-for-Exactpro/client-master/src/components/Chats.tsx":"15","/home/maria/Messenger-for-Exactpro/client-master/src/components/UserAvatar.tsx":"16","/home/maria/Messenger-for-Exactpro/client-master/src/components/ChangeProfileInfo.tsx":"17","/home/maria/Messenger-for-Exactpro/client-master/src/components/Chat.tsx":"18","/home/maria/Messenger-for-Exactpro/client-master/src/components/CreateChat.tsx":"19","/home/maria/Messenger-for-Exactpro/client-master/src/components/ChatInformation.tsx":"20","/home/maria/Messenger-for-Exactpro/client-master/src/components/Messages.tsx":"21","/home/maria/Messenger-for-Exactpro/client-master/src/components/ChangeChatInfo.tsx":"22","/home/maria/Messenger-for-Exactpro/client-master/src/components/AddMemberToChat.tsx":"23"},{"size":427,"mtime":1653555809680,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":1653555809680,"results":"26","hashOfConfig":"25"},{"size":2175,"mtime":1653556436476,"results":"27","hashOfConfig":"25"},{"size":499,"mtime":1653555809680,"results":"28","hashOfConfig":"25"},{"size":624,"mtime":1653555809680,"results":"29","hashOfConfig":"25"},{"size":563,"mtime":1653555809680,"results":"30","hashOfConfig":"25"},{"size":516,"mtime":1653555809680,"results":"31","hashOfConfig":"25"},{"size":656,"mtime":1653555809680,"results":"32","hashOfConfig":"25"},{"size":5365,"mtime":1653556436480,"results":"33","hashOfConfig":"25"},{"size":3906,"mtime":1653555809680,"results":"34","hashOfConfig":"25"},{"size":10479,"mtime":1653725359236,"results":"35","hashOfConfig":"25"},{"size":1380,"mtime":1653556436476,"results":"36","hashOfConfig":"25"},{"size":12279,"mtime":1653555809680,"results":"37","hashOfConfig":"25"},{"size":6191,"mtime":1653555809680,"results":"38","hashOfConfig":"25"},{"size":12635,"mtime":1653563650034,"results":"39","hashOfConfig":"25"},{"size":3813,"mtime":1653555809680,"results":"40","hashOfConfig":"25"},{"size":6161,"mtime":1653555809680,"results":"41","hashOfConfig":"25"},{"size":18452,"mtime":1653563150154,"results":"42","hashOfConfig":"25"},{"size":18238,"mtime":1653555809680,"results":"43","hashOfConfig":"25"},{"size":21003,"mtime":1653644837333,"results":"44","hashOfConfig":"25"},{"size":10633,"mtime":1653561970632,"results":"45","hashOfConfig":"25"},{"size":7179,"mtime":1653555809680,"results":"46","hashOfConfig":"25"},{"size":10836,"mtime":1653555809680,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1t3bala",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/home/maria/Messenger-for-Exactpro/client-master/src/index.tsx",[],["101","102"],"/home/maria/Messenger-for-Exactpro/client-master/src/reportWebVitals.ts",[],"/home/maria/Messenger-for-Exactpro/client-master/src/App.tsx",[],"/home/maria/Messenger-for-Exactpro/client-master/src/stores/OnlineStatusStore.ts",[],"/home/maria/Messenger-for-Exactpro/client-master/src/stores/MessagesStore.ts",[],"/home/maria/Messenger-for-Exactpro/client-master/src/stores/ChatsStore.ts",[],"/home/maria/Messenger-for-Exactpro/client-master/src/stores/GroupUsersStore.ts",[],"/home/maria/Messenger-for-Exactpro/client-master/src/stores/ProfileStore.ts",[],"/home/maria/Messenger-for-Exactpro/client-master/src/components/Authorization.tsx",[],"/home/maria/Messenger-for-Exactpro/client-master/src/components/Messenger.tsx",[],"/home/maria/Messenger-for-Exactpro/client-master/src/components/UpdateListener.tsx",["103","104"],"/home/maria/Messenger-for-Exactpro/client-master/src/Cookie.ts",[],"/home/maria/Messenger-for-Exactpro/client-master/src/Requests.ts",[],"/home/maria/Messenger-for-Exactpro/client-master/src/components/Profile.tsx",[],"/home/maria/Messenger-for-Exactpro/client-master/src/components/Chats.tsx",["105","106","107"],"import React, {useState} from 'react'\nimport { observer } from 'mobx-react'\nimport Requests from '../Requests'\nimport Chat from './Chat'\nimport CreateChat from './CreateChat'\nimport UserAvatar from './UserAvatar'\nimport ChatsStore from '../stores/ChatsStore'\nimport MessagesStore from '../stores/MessagesStore'\nimport OnlineStatusStore from '../stores/OnlineStatusStore'\nimport ProfileStore from '../stores/ProfileStore'\nimport GroupUsersStore from '../stores/GroupUsersStore'\nimport {ChatsUpdate} from '../interfaces/ChatsUpdate'\nimport { UserInfo } from '../interfaces/UserInfo'\nimport { MessagesUpdate } from '../interfaces/MessagesUpdate'\nimport { AppBar, Avatar, IconButton, InputBase, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Toolbar, Typography } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport AddIcon  from '@material-ui/icons/Add'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\n\nvar ChatId: string\n\n// Чаты пользователя\nconst Chats = observer(({chatsStore, messagesStore, groupUsersStore,  profileStore, onlineStatusStore}:{chatsStore: ChatsStore, messagesStore: MessagesStore, groupUsersStore: GroupUsersStore,  profileStore: ProfileStore, onlineStatusStore: OnlineStatusStore}) => {\n\n    const chats: string = 'Chats'\n    const chat: string = 'Chat'\n    const addChat: string = 'AddChat'\n    const [item, setItem] = useState<string>(chats) // Отображаемый элемент\n    const [searchChat, setSearchChat] = useState<string>(\"\")\n    const useStyles = makeStyles((theme: Theme) => // стили\n        createStyles({\n            content: {\n                width: '100%',\n                height: '100%',\n                overflow: 'hidden'\n            },\n            header: {\n                position: \"static\",\n                flexGrow: 1,\n                height: '10%'\n            },\n            headerTitle: {\n                marginLeft: theme.spacing(2)\n            },\n            headerButton: {\n                marginLeft: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            chats: {\n                width: '100%',\n                position: 'relative',\n                overflow: 'scroll',\n                height: '90%'\n            },\n            smallAvatar: {\n                width: theme.spacing(5),\n                height: theme.spacing(5)\n            },\n            search: {\n                flexGrow: 1,\n                position: 'relative',\n                borderRadius: theme.shape.borderRadius,\n                marginRight: theme.spacing(2),\n                marginLeft: 0,\n                width: '100%',\n                [theme.breakpoints.up('sm')]: {\n                  marginLeft: theme.spacing(3),\n                  width: 'auto',\n                },\n              },\n              searchIcon: {\n                padding: theme.spacing(0, 2),\n                height: '100%',\n                position: 'absolute',\n                pointerEvents: 'none',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n              },\n              inputRoot: {\n                color: 'inherit',\n              },\n              inputInput: {\n                padding: theme.spacing(1, 1, 1, 0),\n                // vertical padding + font size from searchIcon\n                paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n                transition: theme.transitions.create('width'),\n                width: '100%',\n                [theme.breakpoints.up('md')]: {\n                  width: '20ch',\n                },\n              },\n        })\n    )\n    const classes = useStyles() // классы стилей\n\n    // Открытие чата\n    function OpenChat(): ChatsUpdate {\n        groupUsersStore.usersData = [] // очитска информации о пользователях чата\n        groupUsersStore.chatId = ChatId \n        var request: {responseText: string, status: number} | null = Requests.OpenChat(ChatId) // запрос на сервер об открытии чата\n        var Chat: ChatsUpdate = { // создание информации о чате\n            id: '',\n            type: '',\n            title: '',\n            bio: '',\n            picture: '',\n            role: '',\n            lastReadIdMessage: ''\n        }\n        switch(request?.status){\n            case 200:\n                chatsStore.chatsData.map((chat: ChatsUpdate)=>{ // заполнение информации о чате\n                    if(chat.id === ChatId){\n                        Chat = chat\n                    }\n                })\n                return Chat\n            case 401:\n                alert(\"User is not logged in.\")\n                return Chat\n            default:\n                alert(\"Error.\")\n                return Chat\n        }  \n    }\n\n    // Удаление чата\n    function DeleteChat(dialog: ChatsUpdate): void {\n        let data = { // подготовка данных для отправки на сервер\n            chatId: dialog.id\n        }\n        var request: {responseText: string, status: number} | null = Requests.DeleteChat(data) // запрос на удаление чата\n        switch(request?.status){\n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }\n    }\n\n    // Получение всех пользователей мессенджера \n    function GetUsers(): UserInfo[]{\n        var request: {responseText: string, status: number} | null = Requests.GetAllUsers() // запрос на получение всех пользователей мессенджера \n        switch(request?.status){\n          case 200:\n            return JSON.parse(request.responseText) as UserInfo[]\n          case 401:\n            alert(\"User is not logged in.\")\n            return [];\n          default:\n            alert(\"Error.\")\n            return []\n        }\n    }\n\n    // Отображение элмента\n    function SetItem(): JSX.Element {\n        switch(item){\n            case addChat:\n                return(\n                    <CreateChat \n                        users={GetUsers()}\n                        profileStore={profileStore}\n                        onlineStatusStore={onlineStatusStore}\n                        Done={(chatId: string | null) => {if(chatId === null) {setItem(chats)} else{ChatId = chatId; setItem(chat)}}}\n                    />\n                )\n            case chat:\n                return(\n                    <Chat \n                        messagesStore={messagesStore} \n                        groupUsersStore={groupUsersStore} \n                        chatInfo={OpenChat()} \n                        profileStore={profileStore}\n                        onlineStatusStore={onlineStatusStore} \n                        Done={()=>setItem(chats)}\n                    />\n                )\n            case chats:\n                return(\n                    <div \n                        className={classes.content}\n                    >\n                        <AppBar\n                            className={classes.header}\n                        >\n                            <Toolbar>\n                                <Typography \n                                    className={classes.headerTitle} \n                                    variant=\"h6\" \n                                    noWrap\n                                >\n                                    Chats\n                                </Typography>\n                                <div className={classes.search}>\n                                    <div className={classes.searchIcon}>\n                                        <SearchIcon />\n                                    </div>\n                                    <InputBase\n                                        placeholder=\"Search…\"\n                                        classes={{\n                                            root: classes.inputRoot,\n                                            input: classes.inputInput,\n                                        }}\n                                        inputProps={{ 'aria-label': 'search' }}\n                                        value={searchChat}\n                                        onChange={event=>setSearchChat(event.target.value)}\n                                    />\n                                </div>\n                                <IconButton\n                                    onClick={()=>setItem(addChat)}\n                                    edge=\"start\"\n                                    className={classes.headerButton}\n                                >\n                                    <AddIcon/>\n                                </IconButton>\n                            </Toolbar>\n                        </AppBar>\n                        <List \n                            dense={true}\n                            className={classes.chats}\n                        >\n                            {chatsStore.chatsData.map((dialog: ChatsUpdate, index: number) =>{\n                                if(!dialog.title.includes(searchChat)) {\n                                    return;\n                                }\n                                var count: number = 0\n                                var newMessage: boolean = false\n                                messagesStore.messagesData.map((message: MessagesUpdate) =>{\n                                    if(message.chatId === dialog.id){\n                                        if(newMessage && !message.mine){\n                                            count++\n                                        }\n                                        if(message.id === dialog.lastReadIdMessage){\n                                            newMessage = true\n                                        }\n                                    }\n                                })\n                                return(\n                                    <ListItem \n                                        key={index}\n                                    >\n                                        <ListItemAvatar>\n                                            {dialog.type === '1' ?\n                                                <UserAvatar \n                                                    user={{name: dialog.title, picture: dialog.picture}} \n                                                    onlineStatusStore={onlineStatusStore}\n                                                    size={5}\n                                                />\n                                            :\n                                                <Avatar\n                                                    src={dialog.picture}\n                                                    className={classes.smallAvatar}\n                                                />\n                                            }\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={dialog.title}\n                                            secondary={count === 0 ? null : count + \" Unread Message\"}\n                                            onClick={()=>{ChatId = dialog.id; setItem(chat)}}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton \n                                                edge=\"end\" \n                                                aria-label=\"delete\"\n                                                onClick={()=>DeleteChat(dialog)}\n                                            >\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                )\n                            })}\n                        </List>\n                    </div>\n                )\n            default:\n                return(\n                    <React.Fragment/>\n                )\n        }\n    }\n\n    return (\n        SetItem()\n    )\n})\n\nexport default Chats","/home/maria/Messenger-for-Exactpro/client-master/src/components/UserAvatar.tsx",["108"],"import {useState} from 'react'\nimport {observer} from 'mobx-react';\nimport OnlineStatusStore from '../stores/OnlineStatusStore';\nimport { Avatar, Badge, createStyles, makeStyles, Theme, withStyles } from '@material-ui/core';\n\n// Аватар пользователя\nconst UserAvatar = observer(({user, onlineStatusStore, size}: {user: {name: string, picture: string}, onlineStatusStore: OnlineStatusStore, size: number}) => {\n\n    const [status, setStatus] = useState<boolean>(false) // \"Онлайн\" статус пользователя\n\n    const useStyles = makeStyles((theme: Theme) => // Стили\n        createStyles({\n            avatar: {\n                width: theme.spacing(size),\n                height: theme.spacing(size)\n            }\n        })\n    )\n    const classes = useStyles() // Классы стилей\n\n    // обновление статуса \n    function Status(): boolean {\n        setTimeout(Update, 16000)\n        const d1: Date = new Date()\n        const d2: Date | undefined = onlineStatusStore.userTimes.get(user.name)\n        if (d2 !== undefined){\n            if (d1.getTime() >= d2.getTime() + 15000){\n                return (false)\n            }\n            else {\n                return (true)\n            }\n        }\n        else {\n            return (false)\n        }\n    }\n    \n    // Проверка на значение статуса \"онлайн\" пользователя\n    function Update(): void {\n        const d1: Date = new Date() // Время сейчас\n        const d2: Date | undefined = onlineStatusStore.userTimes.get(user.name) // Время последнего пребывания \"онлайн\" пользователя\n        if (d2 !== undefined){\n            if (d1.getTime() >= d2.getTime() + 15000){ // Сравнение времени последнего пребывания \"онлайн\" пользователя \n                setStatus (false)\n            }\n            else {\n                setStatus (true)\n            }\n        }\n        else {\n            setStatus (false) // Если нет информации - пользователь не \"онлайн\"\n        }\n    }\n    const StyledBadge = withStyles((theme: Theme) => // Аватарка с \"оналайн\" статусом\n        createStyles({\n            badge: {\n                backgroundColor: '#44b700',\n                color: '#44b700',\n                boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n                '&::after': {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%',\n                    borderRadius: '50%',\n                    animation: '$ripple 1.2s infinite ease-in-out',\n                    border: '1px solid currentColor',\n                    content: '\"\"'\n                }\n            },\n            '@keyframes ripple': {\n                '0%': {\n                    transform: 'scale(.8)',\n                    opacity: 1\n                },\n                '100%': {\n                    transform: 'scale(2.4)',\n                    opacity: 0\n                }\n            }\n        })\n    )(Badge)\n\n    return (\n        Status() ?\n            <StyledBadge\n                overlap=\"circle\"\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                variant=\"dot\"\n            >\n                <Avatar \n                    src={user.picture} \n                    className={classes.avatar}\n                />\n            </StyledBadge>\n        :\n            <Avatar \n                src={user.picture} \n                className={classes.avatar}\n            />\n    )\n    \n})\n\nexport default UserAvatar\n","/home/maria/Messenger-for-Exactpro/client-master/src/components/ChangeProfileInfo.tsx",[],"/home/maria/Messenger-for-Exactpro/client-master/src/components/Chat.tsx",["109","110"],"import React, {ChangeEvent, useState} from 'react'\nimport {observer} from 'mobx-react-lite'\nimport Cookie from '../Cookie'\nimport Requests from '../Requests'\nimport Profile from './Profile'\nimport UserAvatar from './UserAvatar'\nimport Messages from './Messages'\nimport ChatInformation from './ChatInformation'\nimport MessagesStore from '../stores/MessagesStore'\nimport ProfileStore from '../stores/ProfileStore'\nimport OnlineStatusStore from '../stores/OnlineStatusStore'\nimport GroupUsersStore from '../stores/GroupUsersStore'\nimport { ChatsUpdate } from \"../interfaces/ChatsUpdate\"\nimport { MessagesUpdate } from '../interfaces/MessagesUpdate'\nimport { AppBar, Avatar, Button, TextField, Toolbar, Typography, createStyles, makeStyles, Theme, Container, Icon, IconButton } from '@material-ui/core'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\nimport SendIcon from '@material-ui/icons/Send';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nvar profile: string = ''\n\n// Чат \nconst Chat = observer(({messagesStore, chatInfo, groupUsersStore, profileStore, onlineStatusStore, Done}:{messagesStore: MessagesStore, chatInfo: ChatsUpdate, groupUsersStore: GroupUsersStore, profileStore: ProfileStore, onlineStatusStore: OnlineStatusStore, Done: ()=> void}) => {\n    \n    const [message, setMessage] = useState<string>('') // сообщение\n    const [files, setFiles] = useState<{name: string, bytes: string}[]>([]) // файлы\n    const [editMessage, setEditMessage] = useState<MessagesUpdate | null>(null) // измененное сообщение \n    const [item, setItem] = useState<string>('Chat') // отображаемый элемент \n    const useStyles = makeStyles((theme: Theme) => // стили\n        createStyles({\n            content: {\n                width: '100%',\n                height: '100%',\n                overflow: 'hidden'\n            },\n            header: {\n                position: \"static\",\n                flexGrow: 1,\n                height: '10%'\n            },\n            headerTitle: {\n                flexGrow: 1\n            },\n            headerButton: {\n                marginRight: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            chat: {\n                marginTop: theme.spacing(8),\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n                alignItems: 'center'\n            },\n            paper: {\n                marginTop: theme.spacing(4),\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                height: 500\n            },\n            smallAvatar: {\n                width: theme.spacing(5),\n                height: theme.spacing(5)\n            },\n            addAttachButton: {\n                variant: \"contained\",\n                color: \"primary\"\n            },\n            sendMessageButton: {\n                variant: \"contained\",\n                color: \"primary\",\n                margin: theme.spacing(1)\n            },\n            messageInput: {\n\n            },\n            files: {\n                height: 100,\n                width: 300,\n                overflow: 'auto'\n            }\n        })\n    )\n    const classes = useStyles() // классы стилей\n\n    // Открытие профиля\n    function OpenProfile(): void {\n        profileStore.Clear() // очистка данных о старом профиле \n        var request: {responseText: string, status: number} | null = Requests.OpenProfile(profile) // отправка запроса на сервер об открытии профиля\n        switch(request?.status){ \n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }     \n    }\n\n    // Добавление файлов \n    function AddAttachment(event: any): void {\n        let reader: FileReader = new FileReader()\n        reader.onload = () => {\n            setFiles(()=>{\n                var array: {name: string, bytes: string}[] = []\n                for(var index: number = 0; index < files.length; index++){\n                    array[array.length] = files[index]\n                }\n                array[array.length] = {\n                    name: event.target.files[0].name,\n                    bytes: reader.result as string\n                }\n                console.log(array)\n                return array\n            })\n        }\n        reader.onerror = (error) => {\n            alert('Error: ' + error)\n        }\n        reader.readAsDataURL(event.target.files[0])\n    }\n\n    // Удаление файла\n    function DeleteAttachment(file: {name: string, bytes: string}): void{\n        setFiles(()=>{\n            var array: {name: string, bytes: string}[] = []\n            for(var index: number = 0; index < files.length; index++){\n                if (file !== files[index]){\n                    array[array.length] = files[index]\n                }\n            }\n            return array\n        })\n    }\n\n    // Изменение файла\n    function EditMessage(): void{\n        if (editMessage) {\n            let data: {chatId: string, id: string, text: string, files: {name: string, bytes: string}[]} = { // подготовак данных для отправки на сервер \n                chatId: chatInfo.id,\n                id: editMessage.id,\n                text: message,\n                files: files\n            }\n            var request: {responseText: string, status: number} | null = Requests.EditMesssage(data) // отправка запроса на сервер о редактировании сообщения\n            switch(request?.status){\n                case 200:\n                    // очискта данных о сообщении \n                    setFiles([]) \n                    setMessage(\"\")\n                    setEditMessage(null)\n                    break\n                case 401:\n                    alert(\"User is not logged in.\")\n                    break\n                case 403:\n                    alert(\"User has insufficient rights.\")\n                    break\n                default:\n                    alert(\"Error.\")\n                    break\n            }\n        }\n    }\n\n    // Отправка сообщений\n    function SendMessage(): void{\n        if (message === \"\" && files === []) {}\n        else{\n            var date: Date = new Date()\n            let data: {chatId: string, text: string, time: string, date: string, files: {name: string, bytes: string}[]} = { // подготовка данных джля отправки на сервер \n                chatId: chatInfo.id,\n                text: message,\n                time: date.getHours().toString() + \":\" + date.getMinutes().toString(),\n                date: date.getDate().toString() + \"/\" + date.getMonth().toString() + \"/\" + date.getFullYear().toString(),\n                files: files\n            }\n            var request: {responseText: string, status: number} | null = Requests.SendMessage(data) // отправка запроса на отправку сообщения\n            switch(request?.status){\n                case 200:\n                    // очистка сообщения\n                    setFiles([])\n                    setMessage(\"\")\n                    break\n                case 401:\n                    alert(\"User is not logged in.\")\n                    break\n                case 403:\n                    alert(\"User has insufficient rights.\")\n                    break\n                default:\n                    alert(\"Error.\")\n                    break\n            }\n        }\n    }\n\n    // Запрос на файл\n    function FileRequest(src: string): string{\n        var request: XMLHttpRequest = new XMLHttpRequest()\n        request.open(\"GET\", src, false)\n        request.send()\n        switch(request.status){\n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }\n        return request.responseText\n    }\n\n    // Изменение режима на \"редактирование сообщения\"\n    function SetEditMessage(message: MessagesUpdate): void{\n        var cookieKeySession: string | null = Cookie.Get('key') // Достаем из куки данные\n        if(cookieKeySession){\n            setEditMessage(message)\n            setMessage(message.text)\n            if(message.files){\n                setFiles(message.files.map((file: {name: string, type: string, id: string})=>{\n                    return {name: file.name, bytes: FileRequest(\"http://127.0.0.1:8081/get-file?key=\" + cookieKeySession + \"&chatId=\" + message.chatId + \"&id=\" + file.id)}\n                }))\n            }\n            else{\n                setFiles([])\n            }\n        }\n    }\n\n    function SetItem(): JSX.Element {\n        switch(item){\n            case 'Chat':\n                return(\n                    <div\n                    className={classes.content}\n                    >\n                        <AppBar \n                            className={classes.header}\n                        >\n                            <Toolbar>\n                                <IconButton\n                                    onClick={()=>Done()}\n                                    edge=\"start\"\n                                    className={classes.headerButton}\n                                >\n                                    <ArrowBackIosIcon />\n                                </IconButton>\n                                {chatInfo.type === '1' ?\n                                    <Typography \n                                        onClick={()=>{profile = chatInfo.title; setItem('Profile')}} \n                                        className={classes.headerTitle}\n                                        variant=\"h6\" \n                                        noWrap\n                                    >\n                                        {chatInfo.title}\n                                    </Typography>\n                                :\n                                    <Typography \n                                        onClick={()=>setItem('Information')} \n                                        className={classes.headerTitle} \n                                        variant=\"h6\" \n                                        noWrap\n                                    >\n                                        {chatInfo.title}\n                                    </Typography>\n                                }\n                                {chatInfo.type === '1' ?\n                                    <IconButton\n                                        onClick={()=>{profile = chatInfo.title; setItem('Profile')}}\n                                        edge=\"start\"\n                                        className={classes.headerButton}\n                                    >\n                                        <UserAvatar \n                                            user={{name: chatInfo.title, picture: chatInfo.picture}} \n                                            onlineStatusStore={onlineStatusStore}\n                                            size={5}\n                                        />\n                                    </IconButton>\n                                :\n                                    <IconButton\n                                        onClick={()=>setItem('Information')}\n                                        edge=\"start\"\n                                        className={classes.headerButton}\n                                    >\n                                        <Avatar \n                                            src={chatInfo.picture}\n                                            className={classes.smallAvatar}\n                                        />\n                                    </IconButton>\n                                }\n                            </Toolbar>\n                        </AppBar>\n                        <Container\n                            className={classes.chat}\n                        >\n                            <Messages \n                                messagesStore={messagesStore} \n                                chatInfo={chatInfo}\n                                EditMessage={(message: MessagesUpdate)=>SetEditMessage(message)}\n                            />\n                            <div>\n                                <Button\n                                    variant=\"contained\"\n                                    component=\"label\"\n                                    color=\"inherit\"\n                                    className={classes.addAttachButton}\n                                    >\n                                    <input\n                                        type=\"file\"\n                                        onChange={(event: ChangeEvent<HTMLInputElement>)=>AddAttachment(event)}\n                                        hidden\n                                    />\n                                    <AttachFileIcon />\n                                </Button>\n                                <TextField\n                                    label=\"Message\"\n                                    multiline\n                                    rowsMax={3}\n                                    value={message}\n                                    className={classes.messageInput}\n                                    onChange={(event: ChangeEvent<HTMLInputElement>)=>setMessage(event.target.value)}\n                                />\n                                {editMessage ?\n                                    <Button\n                                        variant=\"contained\"\n                                        component=\"label\"\n                                        className={classes.sendMessageButton}\n                                        onClick={()=>{setMessage(''); setFiles([]); setEditMessage(null)}}\n                                    >\n                                        Cancel Edit\n                                    </Button>\n                                : null\n                                }\n                                {editMessage ? \n                                    <Button\n                                        variant=\"contained\"\n                                        component=\"label\"\n                                        className={classes.sendMessageButton}\n                                        endIcon={<SendIcon/>}\n                                        onClick={()=>EditMessage()}\n                                    >\n                                        Send\n                                    </Button>\n                                :\n                                    <Button\n                                        variant=\"contained\"\n                                        component=\"label\"\n                                        className={classes.sendMessageButton}\n                                        endIcon={<SendIcon/>}\n                                        onClick={()=>SendMessage()}\n                                    >\n                                        Send\n                                    </Button>\n                                }\n                                \n                            </div>\n                            <div className={classes.files}>\n                                {files.map((file, index: number)=>{\n                                    return(\n                                        <div key={index}>\n                                            {file.bytes?.slice(file.bytes?.indexOf('data') + 5, file.bytes?.indexOf('/')) === 'image' ?\n                                                <img height={50} width={50} src={file.bytes}/>\n                                            : file.bytes?.slice(file.bytes?.indexOf('data') + 5, file.bytes?.indexOf('/')) === 'video' ?\n                                                <video height={50} width={50} autoPlay loop muted controls src={file.bytes}></video>\n                                            : file.bytes?.slice(file.bytes?.indexOf('data') + 5, file.bytes?.indexOf('/')) === 'audio' ?\n                                                <audio controls src={file.bytes} />\n                                            : file.bytes?.indexOf('data') !== -1 ?\n                                                <a href={file.bytes} download={file.name}><button>{file.name}</button></a>\n                                            : null}\n                                            <IconButton onClick={()=>DeleteAttachment(file)}>\n                                                <DeleteIcon fontSize=\"small\" />\n                                            </IconButton>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        </Container>\n                    </div>\n                )\n            case 'Information':\n                return(\n                    <ChatInformation \n                        chatInfo={chatInfo} \n                        groupUsersStore={groupUsersStore} \n                        profileStore={profileStore} \n                        onlineStatusStore={onlineStatusStore} \n                        Done={()=>setItem('Chat')}\n                    />\n                )\n            case 'Profile':\n                OpenProfile();\n                return(\n                    <Profile \n                        profileStore={profileStore} \n                        onlineStatusStore={onlineStatusStore}\n                        Change={false} \n                        Done={()=>setItem('Chat')}\n                    />\n                )\n            default:\n                return(\n                    <React.Fragment/>\n                )\n        }\n    }\n\n    return (\n        SetItem()\n    )\n})\n\nexport default Chat\n","/home/maria/Messenger-for-Exactpro/client-master/src/components/CreateChat.tsx",["111","112"],"import React, {ChangeEvent, useState} from 'react'\nimport { observer } from 'mobx-react'\nimport Requests from '../Requests'\nimport Profile from './Profile'\nimport UserAvatar from './UserAvatar'\nimport OnlineStatusStore from '../stores/OnlineStatusStore'\nimport ProfileStore from '../stores/ProfileStore'\nimport { UserInfo } from '../interfaces/UserInfo'\nimport { AppBar, Avatar, Button, Checkbox, Container, CssBaseline, FormControlLabel, Grid, IconButton, InputBase, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Switch, TextField, Toolbar, Typography } from '@material-ui/core'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport MessageIcon from '@material-ui/icons/Message'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport SearchIcon from '@material-ui/icons/Search';\n\nvar userProfile: string = ''\n\n// Создание чата \nconst CreateChat = observer(({users, profileStore, onlineStatusStore, Done}: { users: UserInfo[], profileStore: ProfileStore, onlineStatusStore: OnlineStatusStore, Done: (chatId: string | null) => void}) => {\n\n  const createDirect = 'CreateDirect' // элемент\n  const profile = 'Profile' // элемент\n  const createGroupChat = 'CreateGroupChat' // элемент \n  const [item, setItem] = useState<string>(createDirect) // Отобаражаемый элемент\n  const [lastItem, setLastItem] = useState<string>('') // Последний отображаемый элемент\n  const [groupChatName, setGroupChatName] = useState<string>(\"\") // Навзание\n  const [groupChatBio, setGroupChatBio] = useState<string>(\"\") // Био\n  const [groupChatPicture, setGroupChatPicture] = useState<string>('') // Фото\n  const [groupChatSmartType, setGroupChatSmartType] = useState<boolean>(false) // Тип\n  const [groupChatUsers, setGroupChatUsers] = useState<boolean[]>(users.map(()=>{ return false })) // Пользователи\n  const [searchChat, setSearchChat] = useState<string>(\"\")\n  const smartChat = '2' // умный чат\n  const simpleChat = '3' // простой чат\n\n  const useStyles = makeStyles((theme: Theme) => // стили\n    createStyles({\n      content: {\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden'\n      },\n      header: {\n          position: \"static\",\n          flexGrow: 1,\n          height: '10%'\n      },\n      headerButton: {\n          marginLeft: theme.spacing(2),\n          color: 'white',\n          background: '#3d50b6'\n      },\n      createPrivateChat: {\n        width: '100%',\n        position: 'relative',\n        overflow: 'scroll',\n        height: '90%'\n      },\n      profileInfo: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        alignItems: 'center'\n      },\n      root: {\n        flexGrow: 1\n      },\n      root1: {\n        width: '100%',\n        position: 'relative',\n        overflow: 'auto',\n        height: 500\n      },  \n      paper: {\n        marginTop: theme.spacing(4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        height: '100%'\n      },\n      addButton: {\n        textAlign: 'right'\n      },\n      title: {\n        flexGrow: 1\n      },\n      smallAvatar: {\n        width: theme.spacing(5),\n        height: theme.spacing(5)\n      },\n      largeAvatar: {\n        width: theme.spacing(15),\n        height: theme.spacing(15)\n      },\n      cancelButton: {\n        marginRight: theme.spacing(2),\n        color: 'white',\n        background: '#3d50b6'\n      },\n      saveButton: {\n        marginRight: theme.spacing(2),\n        color: 'white',\n        background: '#3d50b6'\n      },  \n      createNewGroupButton: {\n        variant: \"contained\",\n        color: \"primary\"\n      },\n      createNewDialogButton: {\n        variant: \"contained\",\n        color: \"primary\"\n      },\n      setNewPhotoButton: {\n\n      },\n      editNameButton: {\n\n      },\n      editBioButton: {\n\n      },\n      nameInput: {\n\n      },\n      deletePhotoButton: {\n        background: 'red'\n      },\n      formControl: {\n        margin: theme.spacing(3)\n      },\n      members: {\n        overflow: 'auto',\n        width: 100\n      },\n      demo: {\n        backgroundColor: theme.palette.background.paper\n      },\n      search: {\n        flexGrow: 1,\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        marginRight: theme.spacing(2),\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n          marginLeft: theme.spacing(3),\n          width: 'auto',\n        },\n      },\n      searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      inputRoot: {\n        color: 'inherit',\n      },\n      inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n          width: '20ch',\n        },\n      }\n    })\n  )\n  const classes = useStyles() // классы для стилей\n\n  // открытие профиля\n  function OpenProfile(): void {\n    profileStore.Clear() // очитска данных о предыдущем профиле\n    var request: {responseText: string, status: number} | null = Requests.OpenProfile(userProfile) // запрос на открытие профиля\n    switch(request?.status){\n      case 200:\n        break\n      case 401:\n        alert(\"User is not logged in.\")\n        break\n      default:\n        alert(\"Error.\")\n        break\n    }     \n  }\n\n  // загрузка файла\n  function LoadPic(event: any){\n    const reader: FileReader = new FileReader()\n    reader.addEventListener(\"load\", ()=>{ // событие при загрузки файла\n      var file: string | undefined = reader.result?.toString()\n      if(file){\n        setGroupChatPicture(file)\n      }\n    })\n    reader.onerror = (error) => { // событие при ошибке при загрузке файла\n      alert('Error: ' + error)\n    }\n    reader.readAsDataURL(event.target.files[0]) // загрузка файла\n  }\n\n  // создание личного диалога\n  function CreatePrivateChat(user: string): void{\n    let data = { // подготовка данных для отправки на сервер\n      user: user\n    }\n    var request: {responseText: string, status: number} | null = Requests.CratePrivateChat(data) // запрос на сервер о создании личного диалога\n    switch(request?.status){\n      case 200:\n        Done(JSON.parse(request.responseText).chatId) // открытие диалога\n        break\n      case 401:\n        alert(\"User is not logged in.\")\n        break\n      case 409:\n        Done(JSON.parse(request.responseText).chatId) // открытие диалога, если он уже создан\n        break\n      default:\n        alert(\"Error.\")\n        break\n    }\n  }\n\n  // создание группового чата\n  function CreateGroupChat(): void{\n    var chatUsers: string [] = []\n    users.map((user: UserInfo, index: number)=>{ // определение отмеченных пользователей для добавления в чат\n      if (groupChatUsers[index]){\n        chatUsers.push(user.name) \n      }\n    })\n    if (chatUsers.length !== 0 && groupChatName !== \"\"){ // если выбраны пользователи и задано имя чата\n      let data: {users: string[], chatName: string, picture: string, type: string, bio: string} = { // подготовка данных для отправки на сервер\n        users: chatUsers,\n        chatName: groupChatName,\n        picture: groupChatPicture,\n        type: groupChatSmartType ? smartChat : simpleChat,\n        bio: groupChatBio\n      }\n      var request: {responseText: string, status: number} | null = Requests.CreateGroupChat(data) // запрос на сервер о создании группового чата\n      switch(request?.status){\n        case 200:\n          Done(JSON.parse(request.responseText).chatId) // Открытие чата\n          break\n        case 401:\n          alert(\"User is not logged in.\")\n          break\n        case 409:\n          alert(\"Chat creation error.\")\n          break\n        default:\n          alert(\"Error.\")\n          break\n      }\n    }\n    else{\n      alert('Name the chat and add users.')\n    }\n  }\n\n  function SetItem(): JSX.Element {\n    switch(item){\n        case createDirect:\n          return(\n              <div \n                className={classes.content}\n              >\n                <AppBar \n                  className={classes.header}\n                >\n                  <Toolbar>\n                    <Button\n                      onClick={()=>Done(null)}\n                      className={classes.headerButton}\n                      variant=\"outlined\"\n                    >\n                      Cancel\n                    </Button>\n                    <div className={classes.search}>\n                      <div className={classes.searchIcon}>\n                          <SearchIcon />\n                      </div>\n                      <InputBase\n                          placeholder=\"Search…\"\n                          classes={{\n                              root: classes.inputRoot,\n                              input: classes.inputInput,\n                          }}\n                          inputProps={{ 'aria-label': 'search' }}\n                          value={searchChat}\n                          onChange={event=>setSearchChat(event.target.value)}\n                      />\n                  </div>\n                  </Toolbar>\n                </AppBar>\n                <List \n                  dense={true}\n                  className={classes.createPrivateChat}\n                >\n                  <ListItem>\n                    <Button \n                      onClick={()=>setItem(createGroupChat)}\n                      className={classes.createNewGroupButton}\n                      fullWidth\n                    >\n                      New group\n                    </Button>\n                  </ListItem>\n                  {users.map((user: UserInfo, index: number) => {\n                    if(!user.name.includes(searchChat)) {\n                      return null;\n                    }\n                    return (\n                      <ListItem \n                        key={index}\n                      >\n                        <ListItemAvatar>\n                          <UserAvatar \n                            user={{name: user.name, picture: user.picture}} \n                            onlineStatusStore={onlineStatusStore}\n                            size={5}\n                          />\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary={user.name}\n                          onClick={()=>{userProfile = user.name; setLastItem(createDirect); setItem(profile)}}\n                        />\n                        <ListItemSecondaryAction>\n                          <IconButton \n                            edge=\"end\" \n                            aria-label=\"add\"\n                            onClick={()=>CreatePrivateChat(user.name)}\n                          >\n                            <MessageIcon/>\n                          </IconButton>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                    );\n                  }\n                  )}\n                </List>\n              </div>\n          )\n        case createGroupChat:\n          return(\n            <div>\n              <AppBar position=\"static\">\n                <Toolbar>\n                  <Button\n                    onClick={()=>Done(null)}\n                    className={classes.cancelButton}\n                    variant=\"outlined\"\n                  >\n                    Cancel\n                  </Button>\n                  <Typography \n                    className={classes.title}\n                    variant=\"h6\" \n                    noWrap\n                  />\n                  <Button\n                    onClick={()=>CreateGroupChat()}\n                    className={classes.saveButton}\n                    variant=\"outlined\"\n                  >\n                    Done\n                  </Button>\n                </Toolbar>\n              </AppBar>\n              <Container\n                className={classes.profileInfo}\n              >\n                  <Grid\n                    container\n                  >\n                    <Grid\n                      item\n                      xs\n                      className={classes.paper}\n                    >\n                      <Avatar \n                        src={groupChatPicture} \n                        className={classes.largeAvatar}\n                      />\n                      <Button\n                        variant=\"outlined\"\n                        component=\"label\"\n                        className={classes.setNewPhotoButton}\n                      >\n                        <input\n                            type=\"file\"\n                            onChange={event=>LoadPic(event)}\n                            hidden\n                            accept=\".png, .jpg, .jpeg, .svg\"\n                        />\n                        Set A Photo\n                      </Button>\n                      {groupChatPicture !== '' ?\n                        <Button\n                          variant=\"contained\"\n                          className={classes.deletePhotoButton}\n                          onClick={()=>setGroupChatPicture('')}\n                        >\n                          <DeleteIcon />\n                          Delete\n                        </Button>\n                      : null\n                      }\n                      <div>\n                        <TextField\n                          label=\"Name\"\n                          variant=\"standard\"\n                          value={groupChatName}\n                          className={classes.editNameButton}\n                          onChange={event=>setGroupChatName(event.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <TextField\n                          label=\"Bio\"\n                          variant=\"standard\"\n                          value={groupChatBio}\n                          className={classes.editBioButton}\n                          onChange={event=>setGroupChatBio(event.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <FormControlLabel\n                          control={<Switch color=\"primary\" checked={groupChatSmartType} onChange={(event: ChangeEvent<HTMLInputElement>)=>setGroupChatSmartType(event.target.checked)} />}\n                          label=\"Smart Type\"\n                          labelPlacement=\"start\"\n                        />\n                      </div>\n                    </Grid>\n                    <Grid\n                      item\n                      xs\n                      className={classes.paper}\n                    >\n                      <Grid \n                        item\n                      >\n                        <Typography\n                          variant=\"h6\" \n                          className={classes.title}\n                        >\n                          Members\n                        </Typography>\n                        <div \n                          className={classes.demo}\n                        >\n                          <List \n                            dense={true}\n                            className={classes.root1}\n                          >\n                            {users.map((user: UserInfo, index: number) =>\n                              <ListItem key={index}>\n                                <ListItemAvatar>\n                                  <UserAvatar \n                                    user={{name: user.name, picture: user.picture}} \n                                    onlineStatusStore={onlineStatusStore}\n                                    size={5}\n                                  />\n                                </ListItemAvatar>\n                                <ListItemText\n                                  primary={user.name}\n                                  onClick={()=>{userProfile = user.name; setLastItem(createGroupChat); setItem(profile)}}\n                                />\n                                <ListItemSecondaryAction>\n                                  <Checkbox\n                                    color=\"primary\"\n                                    edge=\"end\"\n                                    checked={groupChatUsers[index]} \n                                    onChange={()=>setGroupChatUsers(groupChatUsers.map((user: boolean,index1: number)=>{if(index1 === index) {return !groupChatUsers[index1]} else{ return groupChatUsers[index1]}}))}\n                                  />\n                                </ListItemSecondaryAction>\n                              </ListItem>,\n                            )}\n                          </List>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n              </Container>\n            </div>\n          )\n        case profile:\n          OpenProfile()\n          return(\n            <Profile \n              profileStore={profileStore} \n              onlineStatusStore={onlineStatusStore}\n              Change={false} \n              Done={()=>{lastItem === createGroupChat ? setItem(createGroupChat) : setItem(createDirect)}}\n            />\n          )\n        default:\n          return(\n            <React.Fragment/>\n          )\n    }\n  }\n  \n  return(\n    SetItem()\n  )\n})\n\nexport default CreateChat","/home/maria/Messenger-for-Exactpro/client-master/src/components/ChatInformation.tsx",["113","114","115","116"],"import React, {useState} from 'react'\nimport {observer} from 'mobx-react-lite'\nimport Requests from '../Requests'\nimport Profile from './Profile'\nimport AddMemberToChat from './AddMemberToChat'\nimport ChangeChatInfo from './ChangeChatInfo'\nimport UserAvatar from './UserAvatar'\nimport OnlineStatusStore from '../stores/OnlineStatusStore'\nimport GroupUsersStore from '../stores/GroupUsersStore'\nimport ProfileStore from '../stores/ProfileStore'\nimport { ChatsUpdate } from \"../interfaces/ChatsUpdate\"\nimport { ChatUser } from '../interfaces/ChatUser'\nimport { UserInfo } from '../interfaces/UserInfo'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { AppBar, Avatar, Button, Checkbox, Container, CssBaseline, Grid, IconButton, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Toolbar, Typography } from '@material-ui/core'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nvar profile: string = ''\n\n// информация о чате\nconst Chat = observer(({chatInfo, groupUsersStore, profileStore, onlineStatusStore, Done}:{chatInfo: ChatsUpdate, groupUsersStore: GroupUsersStore, profileStore: ProfileStore, onlineStatusStore: OnlineStatusStore, Done: ()=> void}) => {\n    \n    const [item, setItem] = useState<string>('Information') // отображаемый элемент\n    const [lastItem, setLastItem] = useState<string>('') // предыдущий отображаемый элемент\n    const useStyles = makeStyles((theme: Theme) => // стили\n        createStyles({\n            content: {\n                width: '100%',\n                height: '100%',\n                overflow: 'hidden'\n            },\n            header: {\n                position: \"static\",\n                flexGrow: 1,\n                height: '10%'\n            },\n            headerTitle: {\n                flexGrow: 1\n            },\n            headerButton: {\n                marginLeft: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            addMember: {\n                width: '100%',\n                position: 'relative',\n                overflow: 'scroll',\n                height: '90%'\n            },\n            root: {\n                flexGrow: 1\n            },\n            root1: {\n                width: '100%',\n                backgroundColor: theme.palette.background.paper,\n                position: 'relative',\n                overflow: 'auto'\n            },\n            paper: {\n                marginTop: theme.spacing(8),\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            },\n            title: {\n                flexGrow: 1\n            },\n            userNameLabel: {\n\n            },\n            backButton: {\n                marginRight: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            editButton: {\n                marginRight: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            cancelButton: {\n                marginRight: theme.spacing(2),\n                color: 'white',\n                background: '#3d50b6'\n            },\n            addMemberButton: {\n                variant: \"contained\",\n                color: \"primary\"\n            },\n            smallAvatar: {\n                width: theme.spacing(5),\n                height: theme.spacing(5)\n            },\n            largeAvatar: {\n                width: theme.spacing(15),\n                height: theme.spacing(15)\n            },\n            groupNameInput: {\n\n            },\n            groupBioInput: {\n      \n            },\n            nameInput: {\n\n            },\n            formControl: {\n                margin: theme.spacing(3)\n            },\n            members: {\n                overflow: 'auto',\n                width: 100\n            },\n            demo: {\n                backgroundColor: theme.palette.background.paper\n            }\n        })\n    )\n    const classes = useStyles() // классы стилей\n\n    // удалить пользователя из чата\n    function RemoveMember(user: ChatUser): void { \n        let data: {chatId: string, user: string} = { // формирование данных  для отправки на сервер\n            chatId: chatInfo.id,\n            user: user.name\n        }\n        var request: {responseText: string, status: number} | null = Requests.RemoveMemberFromChat(data) // отправка запроса об удалении пользователя из чата\n        switch(request?.status){\n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            case 403:\n                alert(\"User has insufficient rights.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }\n    }\n\n    // открытие профиля \n    function OpenProfile(): void {\n        profileStore.Clear() // удаление информации о предыдущем профил\n        var request: {responseText: string, status: number} | null = Requests.OpenProfile(profile) // запрос на открытие профиля\n        switch(request?.status){\n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }  \n    }\n\n    // Добавление администратора\n    function AddAdmin(name: string) {\n        let data: {chatId: string, user: string} = { // формирование данных  для отправки на сервер\n            chatId: chatInfo.id,\n            user: name\n        }\n        var request: {responseText: string, status: number} | null = Requests.AddChatAdministrator(data) // отправка запроса на добавление администратора\n        switch(request?.status){\n            case 200:\n                groupUsersStore.usersData.map((user: ChatUser, index: number)=>{\n                    if(user.name === name){\n                        groupUsersStore.usersData[index].role = 'admin'\n                    }\n                })\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            case 403:\n                alert(\"User has insufficient rights.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }\n    }\n\n    //Удаление администратора\n    function DeleteAdmin(name: string) {\n        let data: {chatId: string, user: string} = { // формирование данных  для отправки на сервер\n            chatId: chatInfo.id,\n            user: name\n        }\n        var request: {responseText: string, status: number} | null = Requests.RemoveChatAdministrator(data) // запрос на удаление администратора \n        switch(request?.status){\n            case 200:\n                break\n            case 401:\n                alert(\"User is not logged in.\")\n                break\n            case 403:\n                alert(\"User has insufficient rights.\")\n                break\n            default:\n                alert(\"Error.\")\n                break\n        }\n    }\n\n    // Пользователей которых нет в чате\n    function UsersToAddToChat(): UserInfo[] | null {\n        var request: {responseText: string, status: number} | null = Requests.UsersToAddToChat(chatInfo.id) // отправка запроса о пользователях, которых нет в чате\n        switch(request?.status){\n            case 200:\n                return JSON.parse(request.responseText) as UserInfo[]\n            case 401:\n                alert(\"User is not logged in.\")\n                return null\n            default:\n                alert(\"Error.\")\n                return null\n        }\n    }\n    \n    function SetItem(): JSX.Element {\n        switch(item){\n            case 'Information':\n                return(\n                    <div\n                        className={classes.content}\n                    >\n                        <AppBar \n                            className={classes.header}\n                        >\n                            <Toolbar>\n                                <IconButton\n                                    onClick={()=>Done()}\n                                    edge=\"start\"\n                                    className={classes.headerButton}\n                                >\n                                    <ArrowBackIosIcon />\n                                </IconButton>\n                                <Typography \n                                    className={classes.headerTitle} \n                                    variant=\"h6\" \n                                    noWrap\n                                >\n                                    Information\n                                </Typography>\n                                {chatInfo.type === '3' || chatInfo.type === '2' && (chatInfo.role === 'admin' || chatInfo.role === 'owner') ?\n                                    <Button\n                                        onClick={()=>setItem('ChangeChatInfo')}\n                                        className={classes.headerButton}\n                                        variant=\"outlined\"\n                                    >\n                                        Edit\n                                    </Button>\n                                : null\n                                }\n                            </Toolbar>\n                        </AppBar>\n                        <Container>\n                            <CssBaseline />\n                            <div\n                                className={classes.paper}\n                            >\n                                <Grid\n                                    container\n                                >\n                                    <Grid\n                                        item\n                                        xs={5}\n                                        className={classes.paper}\n                                    >\n                                        <Avatar \n                                            src={chatInfo.picture} \n                                            className={classes.largeAvatar}\n                                        />\n                                        <Typography\n                                            className={classes.groupNameInput}\n                                        >\n                                            {chatInfo.title}\n                                        </Typography>\n                                        <Typography\n                                            className={classes.groupBioInput}\n                                        >\n                                            {chatInfo.bio}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid\n                                        item\n                                        xs={5}\n                                        className={classes.paper}\n                                    >\n                                        <Typography\n                                            variant=\"h6\" \n                                            className={classes.title}\n                                        >\n                                            Members\n                                        </Typography>\n                                        <div \n                                            className={classes.demo}\n                                        >\n                                            <List \n                                                dense={true}\n                                                className={classes.root1}\n                                            >\n                                                {chatInfo.role !== 'none' || chatInfo.type === \"3\" ?\n                                                    <ListItem>\n                                                        <Button \n                                                            onClick={()=>setItem('AddMember')}\n                                                            className={classes.addMemberButton}\n                                                            fullWidth\n                                                        >\n                                                            Add Member\n                                                        </Button>\n                                                    </ListItem>\n                                                : null\n                                                }\n                                                {groupUsersStore.usersData.map((user: ChatUser, index: number) => {\n                                                    if (chatInfo.id === user.id){\n                                                        return(\n                                                            <ListItem \n                                                                key={index}\n                                                            >\n                                                                <ListItemAvatar>\n                                                                    <UserAvatar \n                                                                        user={{name: user.name, picture: user.picture}} \n                                                                        onlineStatusStore={onlineStatusStore}\n                                                                        size={5}\n                                                                    />\n                                                                </ListItemAvatar>\n                                                                <ListItemText\n                                                                    primary={user.name}\n                                                                    secondary={chatInfo.role !== 'owner' && user.role!== 'none' ? user.role : null}\n                                                                    onClick={()=>{profile = user.name; setLastItem('Information'); setItem('Profile');}}\n                                                                />\n                                                                {chatInfo.type === '3' ||  (chatInfo.type === '2' && (chatInfo.role === 'owner' || (chatInfo.role === 'admin' && user.role === 'none'))) ?\n                                                                    <ListItemSecondaryAction>\n                                                                        <IconButton \n                                                                            edge=\"end\" \n                                                                            aria-label=\"delete\"\n                                                                            onClick={()=>RemoveMember(user)}\n                                                                        >\n                                                                            <DeleteIcon />\n                                                                        </IconButton>\n                                                                    </ListItemSecondaryAction>\n                                                                : null\n                                                                }\n                                                            </ListItem>\n                                                        )\n                                                    }\n                                                })}\n                                            </List>\n                                        </div>\n                                    </Grid>\n                                    {chatInfo.type === '2' && chatInfo.role === 'owner' ?\n                                        <Grid\n                                            item\n                                            xs={2}\n                                            className={classes.paper}\n                                        >\n                                            <Typography\n                                                variant=\"h6\" \n                                                className={classes.title}\n                                            >\n                                                Admins\n                                            </Typography>\n                                            <div \n                                                className={classes.demo}\n                                            >\n                                                <List \n                                                    dense={true}\n                                                >\n                                                    {groupUsersStore.usersData.map((user: ChatUser, index: number) => {\n                                                        return(\n                                                            <ListItem \n                                                                key={index}\n                                                            >\n                                                                {chatInfo.type === '2' && chatInfo.role === 'owner' ?\n                                                                    user.role !== 'owner' ?\n                                                                        <Checkbox\n                                                                            color=\"primary\"\n                                                                            checked={user.role==='admin'} \n                                                                            onChange={()=>{user.role !== 'admin' ? AddAdmin(user.name) : DeleteAdmin(user.name)}}\n                                                                        />\n                                                                    :\n                                                                        <Checkbox\n                                                                            checked\n                                                                            disabled\n                                                                        />\n                                                                : null\n                                                                }\n                                                            </ListItem>\n                                                        )\n                                                    })}\n                                                </List>\n                                            </div>\n                                        </Grid>\n                                    : null\n                                    }\n                                </Grid>\n                            </div>\n                        </Container>\n                    </div>\n                )\n            case 'ChangeChatInfo':\n                return(\n                    <ChangeChatInfo \n                        chatInfo={chatInfo} \n                        Done={()=>setItem('Information')}\n                    />\n                )\n            case 'AddMember':\n                var users: UserInfo[] | null = UsersToAddToChat()\n                if(!users){\n                    users = []\n                }\n                return(\n                    <AddMemberToChat\n                        chatInfo={chatInfo} \n                        users={users}\n                        profileStore={profileStore}\n                        onlineStatusStore={onlineStatusStore}\n                        Done={()=>setItem('Information')}\n                    />\n                )\n            case 'Profile':\n                OpenProfile()\n                return(\n                    <Profile \n                        profileStore={profileStore} \n                        onlineStatusStore={onlineStatusStore} \n                        Change={false} \n                        Done={()=>{lastItem === 'Information' ? setItem('Information') : setItem('AddMember')}}\n                    />\n                )\n            default:\n                return(\n                    <React.Fragment/>\n                )\n        }\n    }\n\n    return (\n        SetItem()\n    )\n})\n\nexport default Chat\n","/home/maria/Messenger-for-Exactpro/client-master/src/components/Messages.tsx",["117","118","119","120","121","122","123"],"import {observer} from 'mobx-react-lite'\nimport Cookie from '../Cookie'\nimport Requests from '../Requests'\nimport MessagesStore from '../stores/MessagesStore'\nimport {MessagesUpdate} from \"../interfaces/MessagesUpdate\"\nimport { Avatar, Button, createStyles, IconButton, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, makeStyles, Theme } from '@material-ui/core'\nimport { ChatsUpdate } from '../interfaces/ChatsUpdate'\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\n// сообщения чата\nconst Messages = observer(({messagesStore, chatInfo, EditMessage}:{messagesStore: MessagesStore, chatInfo: ChatsUpdate, EditMessage: (message: MessagesUpdate)=> void})=>{\n\n    const useStyles = makeStyles((theme: Theme) => // стили\n        createStyles({\n            messages: {\n                overflow: 'auto',\n                width: '100%',\n                height: 500\n            },\n            myMessage: {\n                backgroundColor: '#00cfff'\n            },\n            anyMessage: {\n\n            },\n            smallAvatar: {\n                width: theme.spacing(5),\n                height: theme.spacing(5)\n            },\n            root: {\n                width: '100%',\n                backgroundColor: theme.palette.background.paper,\n            },\n            img: {\n                width: 300,\n                height: 300,\n                objectFit: 'cover'\n            }\n        })\n    )\n    const classes = useStyles() // классы стилей\n\n    // прочтение сообщения\n    function ReadMessage(message: MessagesUpdate): void{\n        let data: {chatId: string, id: string} = { // подготовка данных для отправки на сервер \n            chatId: chatInfo.id, \n            id: message.id\n        }\n        var request: {responseText: string, status: number} | null = Requests.ReadMessage(data) // отправка запроса на сервер о прочтении сообщения\n        switch(request?.status){\n            case 200:\n                break\n            case 400:\n                alert(\"\")\n                break\n            default:\n                break\n        }\n    }\n\n    // Удаление сообщения\n    function DeleteMessage(messageId: string): void{\n        let data: {chatId: string, id: string} = { // подготовка данных  для отправки на сервер\n            chatId: chatInfo.id, \n            id: messageId\n        }\n        var request: {responseText: string, status: number} | null = Requests.DeleteMessage(data) // отправка запроса на сервер об удалении сообщения\n        switch(request?.status){\n            case 200:\n                break\n            case 400:\n                alert(\"\")\n                break\n            default:\n                break\n        }\n    }\n\n    // проверка строки на URL\n    function isURL(str: string): boolean{\n        try {\n            var url = new URL(str)\n            return url.toString().indexOf('.') !== -1\n        } \n        catch {\n            return false\n        }\n    }\n\n    // запрос на файл\n    function FileRequest(src: string): string{\n        var request: XMLHttpRequest = new XMLHttpRequest()\n        request.open(\"GET\", src, false)\n        request.send()\n        switch(request.status){\n            case 200:\n                break\n            case 400:\n                alert(\"Данные некорректны!\")\n                break\n            default:\n                break\n        }\n        return request.responseText\n    }\n\n    return (\n        <div className={classes.messages}>\n            <List className={classes.root}>\n            {messagesStore.messagesData.map((message: MessagesUpdate, index: number) => {\n                if (chatInfo.id === message.chatId){ // если сообщение из этого чата\n                    var messageWithSources: any[] = []\n                    var sources: string[] = []\n                    var sourcesAttachments: string[] = []\n                    var messageTextCopy = message.text\n                    // обрезаем строку на составляющие (строка, ссылка)\n                    messageTextCopy.replace(/(https?:\\/\\/[^\\s]+)/g, (url) => {\n                        sources[sources.length] = url\n                        messageWithSources[messageWithSources.length] = messageTextCopy.substring(0, messageTextCopy.indexOf(url))\n                        messageWithSources[messageWithSources.length] = <a href={url} target=\"_blank\">{url}</a>\n                        if (isURL(url)){\n                            sourcesAttachments[sourcesAttachments.length] = url\n                        }\n                        messageTextCopy = messageTextCopy.substring(messageTextCopy.indexOf(url) + url.length)\n                        return ''\n                    })\n                    messageWithSources[messageWithSources.length] = messageTextCopy\n                    if(!message.read && !message.mine){\n                        ReadMessage(message) // прочтение сообщения\n                    }\n                    return(\n                        <ListItem key={index} className={message.mine ? classes.myMessage : classes.anyMessage}>\n                            <ListItemAvatar>\n                                <Avatar \n                                    src={message.senderPicture} \n                                    className={classes.smallAvatar} />\n                            </ListItemAvatar>\n                            <ListItemText primary={<div>\n                                {messageWithSources}\n                                {sourcesAttachments.map((source: string, i: number)=>{\n                                    if(source.substring(source.lastIndexOf('.')) === '.png' || source.substring(source.lastIndexOf('.')) === '.jpg' || source.substring(source.lastIndexOf('.')) === '.jpeg' || source.substring(source.lastIndexOf('.')) === '.svg'){\n                                        return <img key={i} src={source}/>\n                                    }\n                                    if(source.substring(source.lastIndexOf('.')) === '.mp3'){\n                                        return <audio key={i} controls src={source}/>\n                                    }\n                                    if(source.substring(source.lastIndexOf('.')) === '.mp4'){\n                                        return <video key={i} autoPlay loop muted controls src={source}/>\n                                    }\n                                })}\n                                {message.files?.map((file: {name: string, type: string, id: string}, i: number)=>{\n                                    var cookieKeySession: string | null = Cookie.Get('key') // Достаем из куки данные\n                                    if(cookieKeySession){\n                                        return(\n                                            file.type?.slice(0, file.type?.indexOf('/')) === 'image' ?\n                                                <img key={i} src={FileRequest(\"http://127.0.0.1:8081/get-file?key=\" + cookieKeySession + \"&chatId=\" + message.chatId + \"&id=\" + file.id)} className={classes.img}/>\n                                            : file.type?.slice(0, file.type?.indexOf('/')) === 'video' ?\n                                                <div>\n                                                    <video key={i} autoPlay loop muted controls src={FileRequest(\"http://127.0.0.1:8081/get-file?key=\" + cookieKeySession + \"&chatId=\" + message.chatId + \"&id=\" + file.id)} className={classes.img}></video>\n                                                    <a href={FileRequest(\"http://127.0.0.1:8081/get-file?key=\" + cookieKeySession + \"&chatId=\" + message.chatId + \"&id=\" + file.id)} download={file.name}><GetAppIcon/></a>\n                                                </div>\n                                            : file.type?.slice(0, file.type?.indexOf('/')) === 'audio' ?\n                                                <div>\n                                                    <audio key={i} controls src={FileRequest(\"http://127.0.0.1:8081/get-file?key=\" + cookieKeySession + \"&chatId=\" + message.chatId + \"&id=\" + file.id)} />\n                                                    <a href={FileRequest(\"http://127.0.0.1:8081/get-file?key=\" + cookieKeySession + \"&chatId=\" + message.chatId + \"&id=\" + file.id)} download={file.name}><GetAppIcon/></a>\n                                                </div>\n                                            :\n                                                <a key={i} href={FileRequest(\"http://127.0.0.1:8081/get-file?key=\" + cookieKeySession + \"&chatId=\" + message.chatId + \"&id=\" + file.id)} download={file.name}><button>{file.name}</button></a>\n                                        )\n                                    }\n                                })} </div>} secondary={\n                                    <div>\n                                        {message.time}\n                                        {message.edited ?\n                                            <EditIcon />\n                                        : null\n                                        }\n                                        {message.mine && message.read ?\n                                            <DoneAllIcon />\n                                        : null\n                                        }\n                                    </div>\n                            } />\n                            {message.mine ? \n                                <ListItemSecondaryAction>\n                                    <IconButton edge=\"end\" onClick={()=>EditMessage(message)}>\n                                        <EditIcon />\n                                    </IconButton>\n                                    <IconButton edge=\"end\" onClick={()=>DeleteMessage(message.id)}>\n                                        <DeleteForeverIcon />\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            : null}\n                        </ListItem>\n                    )\n                }\n            })}\n            </List>\n        </div>\n    )\n})\n\nexport default Messages","/home/maria/Messenger-for-Exactpro/client-master/src/components/ChangeChatInfo.tsx",[],"/home/maria/Messenger-for-Exactpro/client-master/src/components/AddMemberToChat.tsx",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":105,"column":84,"nodeType":"130","messageId":"131","endLine":105,"endColumn":86},{"ruleId":"132","severity":1,"message":"133","line":186,"column":8,"nodeType":"134","endLine":186,"endColumn":10,"suggestions":"135"},{"ruleId":"128","severity":1,"message":"129","line":115,"column":61,"nodeType":"130","messageId":"131","endLine":115,"endColumn":63},{"ruleId":"128","severity":1,"message":"129","line":232,"column":37,"nodeType":"136","messageId":"137","endLine":232,"endColumn":44},{"ruleId":"128","severity":1,"message":"129","line":236,"column":90,"nodeType":"130","messageId":"131","endLine":236,"endColumn":92},{"ruleId":"138","severity":1,"message":"139","line":9,"column":12,"nodeType":"140","messageId":"141","endLine":9,"endColumn":18},{"ruleId":"138","severity":1,"message":"142","line":15,"column":110,"nodeType":"140","messageId":"141","endLine":15,"endColumn":114},{"ruleId":"143","severity":1,"message":"144","line":370,"column":49,"nodeType":"145","endLine":370,"endColumn":95},{"ruleId":"138","severity":1,"message":"146","line":9,"column":55,"nodeType":"140","messageId":"141","endLine":9,"endColumn":66},{"ruleId":"128","severity":1,"message":"129","line":231,"column":46,"nodeType":"130","messageId":"131","endLine":231,"endColumn":48},{"ruleId":"128","severity":1,"message":"129","line":170,"column":78,"nodeType":"130","messageId":"131","endLine":170,"endColumn":80},{"ruleId":"147","severity":1,"message":"148","line":250,"column":56,"nodeType":"149","messageId":"150","endLine":250,"endColumn":58},{"ruleId":"147","severity":1,"message":"148","line":250,"column":81,"nodeType":"149","messageId":"150","endLine":250,"endColumn":83},{"ruleId":"128","severity":1,"message":"151","line":320,"column":112,"nodeType":"130","messageId":"152","endLine":320,"endColumn":114},{"ruleId":"138","severity":1,"message":"153","line":6,"column":18,"nodeType":"140","messageId":"141","endLine":6,"endColumn":24},{"ruleId":"128","severity":1,"message":"151","line":113,"column":86,"nodeType":"130","messageId":"152","endLine":113,"endColumn":88},{"ruleId":"154","severity":1,"message":"155","line":123,"column":73,"nodeType":"145","endLine":123,"endColumn":103},{"ruleId":"128","severity":1,"message":"151","line":143,"column":84,"nodeType":"130","messageId":"152","endLine":143,"endColumn":86},{"ruleId":"143","severity":1,"message":"144","line":145,"column":48,"nodeType":"145","endLine":145,"endColumn":75},{"ruleId":"128","severity":1,"message":"151","line":154,"column":112,"nodeType":"130","messageId":"152","endLine":154,"endColumn":114},{"ruleId":"143","severity":1,"message":"144","line":159,"column":49,"nodeType":"145","endLine":159,"endColumn":212},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chatsStore', 'groupUsersStore', 'messagesStore', 'onlineStatusStore.userTimes', and 'profileStore'. Either include them or remove the dependency array.","ArrayExpression",["158"],"ReturnStatement","expectedReturnValue","@typescript-eslint/no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","'Icon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'CssBaseline' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Button' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},"Update the dependencies array to be: [chatsStore, groupUsersStore, messagesStore, onlineStatusStore.userTimes, profileStore]",{"range":"161","text":"162"},[9204,9206],"[chatsStore, groupUsersStore, messagesStore, onlineStatusStore.userTimes, profileStore]"]